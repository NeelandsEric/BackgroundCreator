package Creator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.IllegalComponentStateException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.TreeMap;
import java.util.Map;
import java.util.Map.Entry;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 * Background rack is the backgrounds found after the main panels, and before
 * the loads panels
 *
 * @author EricGummerson
 */
public class BackgroundRackNew extends javax.swing.JPanel {

    public DisplayFrame df;
    public int numRacks;
    public Rack rack;
    public Font font;
    public Border border;
    public String img;
    public String storeName;
    public int rackNum;
    public String[] rackNames;
    private boolean canClick;
    private Map<String, Component> widgetComponents;

    /**
     * Creates new form BackgroundRack
     *
     * @param df
     * @param rackNum
     */
    public BackgroundRackNew(DisplayFrame df, int rackNum) {

        initComponents();
        this.df = df;
        this.rack = new Rack();
        this.img = "";
        this.rackNum = rackNum;
        this.canClick = false;
        this.rackNames = new String[]{"Main", "Rack {}", "Rack {}", "Loads", "Financial"};
        this.widgetComponents = new TreeMap<>();

    }

    /**
     * Updates the form with the right information
     *
     * @param rack rack list
     * @param numRacks number of racks to read from the list
     * @param font global font
     * @param border global border
     * @param img global img string for the logo
     * @param storeName global string for the store name
     * @param rackNames rack names as string array
     */
    public void updateRacks(Rack rack, int numRacks, Font font, Border border, String img, String storeName, String[] rackNames) {

        this.rack = rack;
        this.numRacks = numRacks;
        this.font = font;
        this.border = border;
        this.img = img;
        this.storeName = storeName;
        this.rackNames = rackNames;
        this.widgetComponents = new TreeMap<>();
        this.updateView();
    }

    /**
     * updates the rack number
     *
     * @param rackNum
     */
    public void updateRackNum(int rackNum) {
        this.rackNum = rackNum;
    }

    /**
     * updates the storename
     *
     * @param storeName string of the store name
     */
    public void updateStoreName(String storeName) {
        this.storeName = storeName;
        this.updateView();
    }

    /**
     * updates the image url for the logo
     *
     * @param img string file path of the logo
     */
    public void updateImageURL(String img) {
        this.img = img;
        this.updateView();
    }

    /**
     * updates the font selected from the settings panel
     *
     * @param font Font
     */
    public void updateFont(Font font) {
        this.font = font;
        this.updateView();
    }

    /**
     * Updates the border
     *
     * @param border Border
     */
    public void updateBorder(Border border) {
        this.border = border;
        this.updateView();
    }

    /**
     * Updates the font and bother
     *
     * @param font Font
     * @param border Border
     */
    public void updateFontBorder(Font font, Border border) {
        this.font = font;
        this.border = border;
        this.updateView();
    }

    private void buttonClick() {

        if (canClick) {
            Point p = this.getMousePosition();
            df.returnClick(p);
        }
    }

    public boolean canClick() {
        return canClick;
    }

    public void setCanClick(boolean canClick) {
        this.canClick = canClick;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _Panel_MainPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1000, 800));

        _Panel_MainPanel.setBackground(new java.awt.Color(0, 0, 0));
        _Panel_MainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _Panel_MainPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout _Panel_MainPanelLayout = new javax.swing.GroupLayout(_Panel_MainPanel);
        _Panel_MainPanel.setLayout(_Panel_MainPanelLayout);
        _Panel_MainPanelLayout.setHorizontalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        _Panel_MainPanelLayout.setVerticalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void _Panel_MainPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__Panel_MainPanelMousePressed
        if (canClick) {
            //System.out.println(this.rack.getName() + " click "+ evt.getPoint());
            df.returnClick(evt.getPoint());
        }
    }//GEN-LAST:event__Panel_MainPanelMousePressed

    /**
     * updates the panel
     */
    public void updateView() {

        int gridXPos, gridYPos, gridWidth, gridHeight;
        int maxGridWidth = 30;
        JPanel panel;
        GridBagLayout gbl = new GridBagLayout();

        _Panel_MainPanel.setLayout(gbl);
        _Panel_MainPanel.removeAll();
        widgetComponents.clear();

        //===========================================================
        // Store panel info at top
        // Positioning & Constraints
        gridXPos = 0;
        gridYPos = 0;
        gridWidth = maxGridWidth;
        gridHeight = 5;

        // End of Constraints
        panel = panelTop(img, storeName);
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 0, GridBagConstraints.BOTH, 0, 0);
        //===========================================================  

        //===========================================================
        // Pressure/temp
        // Positioning & Constraints
        gridXPos = 0;
        gridYPos += gridHeight;

        gridWidth = maxGridWidth;
        gridHeight = 10;

        // End of Constraints
        panel = panelLiquidDischarge();
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 0, GridBagConstraints.BOTH, 0, 0);
        //=========================================================== 

        //=========================================================== 
        // Filler area
        gridXPos = 0;
        gridYPos += gridHeight;
        gridHeight = 5;
        gridWidth = maxGridWidth;
        panel = new JPanel();
        //panel.setPreferredSize(new Dimension(5, 100));
        panel.setBackground(Color.black);
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 1, GridBagConstraints.BOTH, 0, 20);
        //=========================================================== 

        //===========================================================
        // Compressor status
        // Positioning & Constraints
        gridXPos = 0;
        gridYPos += gridHeight;
        gridHeight = 20;
        // End of Constraints
        panel = panelCompressor();
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 0, GridBagConstraints.BOTH, 0, 0);
        //=========================================================== 

        //=========================================================== 
        // Filler area
        gridXPos = 0;
        gridYPos += gridHeight;
        gridHeight = 5;
        gridWidth = maxGridWidth;
        panel = new JPanel();
        //panel.setPreferredSize(new Dimension(5, 100));
        panel.setBackground(Color.black);
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 1, GridBagConstraints.BOTH, 0, 20);
        //=========================================================== 

        //===========================================================
        // Condenser
        // Positioning & Constraints
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = maxGridWidth;
        gridHeight = 15;
        // End of Constraints
        panel = panelCondenser();
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 0, GridBagConstraints.BOTH, 0, 0);
        //=========================================================== 

        //===========================================================
        // Fan images - blanks
        // Positioning & Constraints
        gridXPos = 0;
        gridYPos += gridHeight;;

        // End of Constraints
        //=========================================================== 
        // Filler area
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = maxGridWidth;
        gridHeight = 10;
        // End of Constraints
        panel = new JPanel();
        panel.setBackground(Color.black);
        //panel.setBorder(border);
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 0, GridBagConstraints.BOTH, 0, 120);
        //=========================================================== 

        //==============================================================
        // make labels white
        setLabels(_Panel_MainPanel, Colours.White.getCol());
        // do it before last panel
        //==============================================================

        // Bottom Panel
        //===========================================================
        // Constraints  
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = maxGridWidth;
        gridHeight = 5; // 5 per row for performance
        // End of Constraints
        panel = panelBottom(this.numRacks);
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        this.addPanel(panel, gridXPos, gridYPos, gridWidth, gridHeight, 1, 0, GridBagConstraints.BOTH, 0, 0);
        //===========================================================

        _Panel_MainPanel.revalidate();
        _Panel_MainPanel.repaint();

    }

    public Map<String, Rectangle> positions() {
        //public void positions() {
        //System.out.println("Positions " + rack.getName());
        Map<String, Rectangle> ioPoints = new TreeMap<>();

        if (widgetComponents.isEmpty()) {
            return null;
        }
        for (Entry<String, Component> entry : widgetComponents.entrySet()) {

            Component p = entry.getValue();
            try {
                //System.out.println("Tooltip: " + ((JLabel) p).getToolTipText());
                if (p instanceof JLabel) {
                    //if (((JLabel) p).getToolTipText() != null) {
                    //System.out.println("Has a tooltip:" + ((JLabel) p).getToolTipText());
                    Rectangle r = p.getBounds();
                    Component par = p;
                    while (par.getParent() != _Panel_MainPanel) {
                        par = par.getParent();
                    }
                    r = SwingUtilities.convertRectangle(par, r, _Panel_MainPanel);
                    //((JLabel) p).setText("x=" + r.getX() + ", y=" + r.getY());

                    Rectangle oldRect = ioPoints.put(entry.getKey(), r);
                    if (oldRect != null) {
                        System.out.println("Replaced " + ((JLabel) p).getToolTipText()
                                + ".\nOld rectangle " + oldRect.toString()
                                + "\nNew rectangle: " + r.toString());
                    }

                }

            } catch (NullPointerException | IllegalComponentStateException e) {
                System.out.println("Error with " + ((JLabel) p).getName());
            }

        }

        return ioPoints;

    }

//addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
    /**
     * adds a panel, with all the settings needed for the gridbagconstraint
     * variable
     *
     * @param newPanel JPanel
     * @param x gridx
     * @param y gridy
     * @param gwid gridwidth
     * @param ghei gridheight
     * @param wx weightx
     * @param wy weighty
     * @param fill fill
     * @param padx ipadx
     * @param pady ipady
     */
    public void addPanel(JPanel newPanel, int x, int y, int gwid, int ghei, double wx, double wy, int fill, int padx, int pady) {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = x;
        c.gridy = y;
        c.gridwidth = gwid;
        c.gridheight = ghei;
        c.weightx = wx;
        c.weighty = wy;
        c.fill = fill;
        c.ipadx = padx;
        c.ipady = pady;

        _Panel_MainPanel.add(newPanel, c);

    }

    /**
     * sets the labels in the container to a colour
     *
     * @param p1 container
     * @param c colour
     */
    public void setLabels(Container p1, Color c) {

        for (Component p : p1.getComponents()) {
            if (p instanceof JLabel) {
                ((JLabel) p).setForeground(Color.white);
                //System.out.println(e.getMessage());
            } else {
                if (p instanceof JPanel) {
                    setLabels((Container) p, c);
                }
            }
        }

    }

    /**
     * creates a pressure temp panel
     *
     * @return JPanel
     */
    public JPanel panelLiquidDischarge() {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        // Return a panel containing two labels
        JPanel panel = new JPanel(gbl);
        //===========================
        // RACK NAMES
        //===========================

        //                       Liquid            |         Discharge         |
        //    DLT    |    COP     |    Subcool     |     Pressure   |   Temp   |       
        //-------------------------------------------------------------------
        //     
        //==================================================================
        // Liquid (3 x 2) ipady = 10
        label = new JLabel("Liquid");
        label.setFont(font.deriveFont(Font.BOLD, 18));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 3;
        c.gridheight = 2;
        c.ipady = 25;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Discharge (2 x 2) ipady = 10
        label = new JLabel("Discharge");
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 18));
        label.setBorder(border);
        c.gridx = 3;
        c.gridwidth = 2;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        // Down 2 rows
        c.ipady = 10;
        //==================================================================
        // DLT (1 x 2)
        label = new JLabel("Condenser Outlet Temp");
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 0;
        c.gridy = 2;
        c.gridwidth = 1;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // COP (1 x 2)
        label = new JLabel("Condenser Outlet Pressure");
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 1;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Subcooling (1 x 2)
        label = new JLabel("Subcool");
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 2;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Pressure (1 x 2)
        label = new JLabel("Pressure");
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 3;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Temperature (1 x 2)
        label = new JLabel("Temperature");
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 4;
        //c.ipady = 100;        
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        // down a row
        //==================================================================
        // Liquid (1 x 1)
        c.gridx = 0;
        c.gridy = 4;
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridheight = 1;
        c.ipady = 45;
        //==================================================================
        //==================================================================
        // Blank fields
        // 

        String[] tooltip = new String[]{"Cond Outlet Temperature " + rack.getName(),
            "Cond Outlet Pressure " + rack.getName(),
            "Cond Out Subcooling " + rack.getName(),
            "Discharge Pressure " + rack.getName(),
            "Discharge Temp " + rack.getName()};

        for (int j = 0; j < 5; j++) {

            label = new JLabel("");
            label.setFont(font);
            label.setBorder(border);
            label.setOpaque(true);
            label.setBackground(Colours.BlueLightest.getCol());
            widgetComponents.put(tooltip[j], label);
            panel.add(label, c);

            c.gridx++;
        }
        //==================================================================

        panel.setBackground(Color.black);
        return panel;
    }

    /**
     * Creates a panel condenser panel
     *
     * @return JPanel
     */
    public JPanel panelCondenser() {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);

        //===========================
        // RACK CONDENSER
        //===========================
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.weightx = 0;
        c.weighty = 1;
        c.gridy = 0;
        c.gridheight = 2;
        c.gridwidth = 1;
        label = new JLabel("Fans");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 18));
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        panel.add(label, c);

        int numCond = rack.getNumCondenserFans();
        c.weightx = 1;
        for (int i = 1; i <= numCond; i++) {

            label = new JLabel("Fan " + i + " ");
            label.setFont(font.deriveFont(Font.BOLD, 18));
            label.setOpaque(true);
            label.setBackground(Colours.BlueDark.getCol());
            label.setBorder(border);

            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            c.gridx = i;
            panel.add(label, c);
        }

        c.weightx = 0;
        c.gridheight = 1;
        label = new JLabel("Fan Amps");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setBorder(border);
        c.gridy = 2;
        c.gridx = 0;
        c.ipady = 10;
        panel.add(label, c);
        label = new JLabel(" Fault Detect ");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setOpaque(true);
        label.setBackground(Colours.BlueLightest.getCol());
        label.setBorder(border);
        c.gridy = 3;
        c.gridx = 0;
        panel.add(label, c);

        c.gridy = 2;
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;

        String[] tooltip = new String[]{"Cond Fan Amps " + rack.getName() + " `%fannum`",
            "Cond Fan Status " + rack.getName() + " `%fannum`"};
        String fannum;
        for (int j = 0; j < 2; j++) {
            for (int i = 1; i <= numCond; i++) {
                label = new JLabel("");
                fannum = ('0' + String.valueOf((i)));
                fannum = fannum.substring(fannum.length() - 2);

                c.gridx = i;
                label.setOpaque(true);
                label.setBackground(j == 0 ? Colours.BlueLight.getCol() : Colours.BlueLightest.getCol());
                label.setBorder(border);
                widgetComponents.put(tooltip[j].replace("`%fannum`", fannum), label);
                panel.add(label, c);
            }
            c.gridy = 3;

        }

        panel.setBackground(Color.black);
        return panel;
    }

    /**
     * Creates a panel compressor panel
     *
     * @return JPanel
     */
    public JPanel panelCompressor() {

        // Condenser Panel will list the condensers 
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JLabel label;
        JPanel panel = new JPanel(gbl);
        SuctionGroup sg;
        // Calculate the number of compressors
        int numSg = rack.getNumSuctionGroups();
        int[] comp = new int[numSg];
        int numComp = rack.getNumCompressors();
        for (int i = 0; i < numSg; i++) {
            comp[i] = rack.getSuctionGroupIndex(i).getNumCompressors();
        }

        // we saved the number of compressors for each suction group
        // Now we assign x number of columns for each suction group, where each
        // suction group number of compressors will be x
        //===========================
        // RACK COMPRESSOR
        c.gridy = 0;
        c.weightx = 0;
        c.weighty = 1;
        c.ipady = 10;
        c.gridheight = 2;
        c.gridwidth = 2;
        c.fill = GridBagConstraints.BOTH;
        label = new JLabel("");
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueDark.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //==========================================================
        //                  Suction groups
        //==========================================================
        c.gridx = 2;
        c.gridy = 0;
        c.weightx = 1;
        for (int i = 0; i < numSg; i++) {

            // Suction group
            c.gridheight = 2;
            c.gridwidth = comp[i];
            if (comp[i] == 1) {
                c.ipadx = 45;
            }
            label = new JLabel(rack.getSuctionGroupNameIndex(i));

            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setFont(font.deriveFont(Font.BOLD, 18));
            label.setOpaque(true);
            label.setBackground(Colours.BlueDark.getCol());
            label.setBorder(border);
            panel.add(label, c);
            c.ipadx = 0;
            c.gridx += comp[i];
        }

        // Add the left side titles
        //===========================
        // row 2
        // SpSt / Temp
        //===========================
        c.gridx = 0;
        c.gridy = 2;
        c.gridwidth = 2;
        c.weightx = 0;
        c.weighty = 0;
        c.ipady = 10;
        label = new JLabel("SpSt | Actual Pres");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;

        String[] tooltip = new String[]{"Suction Pressure " + rack.getName() + " `%sgname`"};

        for (int i = 0; i < numSg; i++) {

            c.gridwidth = comp[i];
            label = new JLabel("");
            label.setFont(font.deriveFont(Font.BOLD, 16));
            label.setOpaque(true);
            label.setBorder(border);
            label.setBackground(Colours.BlueLight.getCol());
            widgetComponents.put(tooltip[0].replace("`%sgname`", rack.getSuctionGroupNameIndex(i)), label);
            panel.add(label, c);
            c.gridx += comp[i];
        }

        //===========================
        // row 4
        // SH Temp / Superheat
        //===========================
        c.gridx = 0;
        c.gridy = 4;
        c.gridwidth = 2;
        c.weightx = 0;
        label = new JLabel("SH Tmp | Superheat ");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLightest.getCol());
        panel.add(label, c);

        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;
        tooltip = new String[]{"Suction Temp " + rack.getName() + " `%sgname`"};

        for (int i = 0; i < numSg; i++) {

            c.gridwidth = comp[i];
            label = new JLabel("");
            label.setFont(font.deriveFont(Font.BOLD, 16));
            label.setOpaque(true);
            label.setBorder(border);
            label.setBackground(Colours.BlueLightest.getCol());
            widgetComponents.put(tooltip[0].replace("`%sgname`", rack.getSuctionGroupNameIndex(i)), label);
            panel.add(label, c);
            c.gridx += comp[i];
        }

        // Row 6
        c.weightx = 0;
        c.gridy = 6;
        c.gridx = 0;
        c.gridwidth = 2;
        c.ipady = 10;
        label = new JLabel(""); // Compressors
        //label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //label.setFont(font.deriveFont(Font.BOLD, 20));
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        c.gridx += 2;
        for (int i = 0; i < numSg; i++) {
            // now each compressor      
            c.weightx = 1;
            c.gridwidth = 1;
            c.ipadx = 10;
            for (int j = 0; j < comp[i]; j++) {
                sg = rack.getSuctionGroupIndex(i);
                if (sg.getNumCompressors() == 1) {
                    label = new JLabel("  " + sg.getCompressorNameIndex(j) + "  ");
                } else {
                    label = new JLabel(sg.getCompressorNameIndex(j));
                }
                label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                label.setFont(font.deriveFont(Font.BOLD, 18));
                label.setOpaque(true);
                label.setBackground(Colours.BlueLight.getCol());
                label.setBorder(border);
                panel.add(label, c);
                c.gridx += 1;

            }
            c.ipadx = 0;

        }

        //==================================================================
        //===========================
        // row 8
        // Discharge temp
        //===========================
        c.gridx = 0;
        c.gridy = 8;
        c.gridwidth = 2;
        c.weightx = 0;
        label = new JLabel("Discharge Temp");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLightest.getCol());
        panel.add(label, c);

        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;

        tooltip = new String[]{"Comp Discharge Temp " + rack.getName() + " `%sgname` `%compname`"};

        for (int i = 0; i < numSg; i++) {
            for (int j = 0; j < comp[i]; j++) {

                label = new JLabel("");
                label.setFont(font);
                label.setOpaque(true);
                label.setBorder(border);
                label.setBackground(Colours.BlueLightest.getCol());
                widgetComponents.put(tooltip[0]
                        .replace("`%sgname`", rack.getSuctionGroupNameIndex(i))
                        .replace("`%compname`", rack.getSuctionGroupIndex(i).getCompressorNameIndex(j)), label);
                panel.add(label, c);
                c.gridx += 1;
            }
        }

        //==================================================================
        //===========================
        // row 10
        // Amps
        //===========================
        c.gridx = 0;
        c.gridy = 10;
        c.gridwidth = 2;
        c.weightx = 0;
        label = new JLabel("Amps");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);

        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;

        tooltip = new String[]{"Comp Amps Temp " + rack.getName() + " `%sgname` `%compname`"};

        for (int i = 0; i < numSg; i++) {
            for (int j = 0; j < comp[i]; j++) {
                label = new JLabel("");
                label.setFont(font);
                label.setOpaque(true);
                label.setBorder(border);
                label.setBackground(Colours.BlueLight.getCol());
                widgetComponents.put(tooltip[0]
                        .replace("`%sgname`", rack.getSuctionGroupNameIndex(i))
                        .replace("`%compname`", rack.getSuctionGroupIndex(i).getCompressorNameIndex(j)), label);
                panel.add(label, c);
                c.gridx += 1;
            }
        }

        //==================================================================
        //==================================================================
        // compressor image
        c.gridy = 11;
        c.gridx = 2;
        c.gridwidth = 1;
        c.weightx = 1;
        c.weighty = 0;
        c.ipady = 35;

        ImageIcon icon;
        BufferedImage buff = null;
        try {

            if (numComp >= 10 && numComp <= 12) {
                buff = ImageIO.read(this.getClass().getResourceAsStream("/Creator/pics/compSmaller3.png"));
                icon = new ImageIcon(buff);

            } else if (numComp > 12) {
                buff = ImageIO.read(this.getClass().getResourceAsStream("/Creator/pics/compSmaller4.png"));
                icon = new ImageIcon(buff);
            } else {
                buff = ImageIO.read(this.getClass().getResourceAsStream("/Creator/pics/compSmaller2.png"));
                icon = new ImageIcon(buff);
            }

            tooltip = new String[]{"Comp Status " + rack.getName() + " `%sgname` `%compname`"};
            for (int i = 0; i < numSg; i++) {
                for (int j = 0; j < comp[i]; j++) {
                    label = new JLabel(icon, JLabel.CENTER);
                    label.setVerticalAlignment(JLabel.BOTTOM);
                    label.setOpaque(true);
                    //label.setBorder(border);
                    label.setBackground(Color.black);
                    widgetComponents.put(tooltip[0]
                            .replace("`%sgname`", rack.getSuctionGroupNameIndex(i))
                            .replace("`%compname`", rack.getSuctionGroupIndex(i).getCompressorNameIndex(j)), label);
                    panel.add(label, c);
                    c.gridx += 1;
                }
            }
        } catch (IOException e) {
            System.out.println("Didnt read the compressor images");
        }

        panel.setBackground(Color.black);
        return panel;
    }

    /**
     * Creates the bottom panel
     *
     * @param numRacks number of racks
     * @return Jpanel
     */
    public JPanel panelBottom(int numRacks) {

        JButton button;
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 0;
        c.gridwidth = 5;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // Powered by label
        //===========================
        label = new JLabel("Powered by N.O.E.L");
        label.setForeground(Colours.White.getCol());
        //label.setBorder(border);
        label.setFont(font.deriveFont(Font.BOLD, 20));
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        panel.add(label, c);
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 5;
        //c.gridy = 0;
        c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        //==========================================================
        //                  Buttons
        //==========================================================
        // Main button
        //button = new JButton("<html><font color = green>Main</font></html>");        
        button = new JButton("Main");
        button.setFont(font.deriveFont(Font.BOLD, 20));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonClick();
            }
        });
        panel.add(button, c);
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        //c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 6;
        //c.gridy = 0;
        //c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        // Rack buttons
        for (int i = 0; i < numRacks; i++) {
            c.gridx += 1;
            button = new JButton(rackNames[i]);
            button.setFont(font.deriveFont(Font.BOLD, 20));
            button.setAlignmentX((Component.CENTER_ALIGNMENT));

            if (rackNum == i) {
                button.setEnabled(false);
            }
            button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    buttonClick();
                }
            });
            panel.add(button, c);
        }

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        //c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx += 1;
        //c.gridy = 0;
        //c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        // Load Button
        button = new JButton("Loads");
        button.setFont(font.deriveFont(Font.BOLD, 20));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonClick();
            }
        });
        panel.add(button, c);

        // Financial Button
        c.gridx += 1;
        button = new JButton("Financial");
        button.setFont(font.deriveFont(Font.BOLD, 20));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonClick();
            }
        });
        panel.add(button, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx += 1;
        //c.gridy = 0;
        c.gridwidth = 5;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Map Label
        label = new JLabel("Map");
        label.setFont(font.deriveFont(Font.BOLD, 20));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    /**
     * Creates the top panel
     *
     * @param imgUrl String of img file location
     * @param storeName String of store name
     * @return Jpanel
     */
    public JPanel panelTop(String imgUrl, String storeName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 1;
        c.gridwidth = 10;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // store logo 
        //===========================       
        label = new JLabel();
        if (!"".equals(imgUrl)) {
            ImageIcon icon = new ImageIcon(imgUrl);
            label.setIcon(icon);
        } else {
            label.setText("NO LOGO SELECTED");
        }
        //label.setBorder(border);        
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 10;
        //c.gridy = 0;
        c.gridwidth = 20;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("");
        //label.setBorder(border);        
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 30;
        //c.gridy = 1;
        c.gridwidth = 10;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel(rack.getName() + "                 " + storeName);
        label.setOpaque(true);
        label.setBackground(Color.BLACK);
        label.setFont(font.deriveFont(Font.BOLD, 22));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setBorder(BorderFactory.createRaisedBevelBorder());
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel _Panel_MainPanel;
    // End of variables declaration//GEN-END:variables
}
