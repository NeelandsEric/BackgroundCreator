package Creator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.IllegalComponentStateException;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 * Creates the main background which is the first page of the of the stores
 * Contains information all all compressors, systems, condensers, suction groups
 * price points, electricity usage and previous history numbers
 *
 * @author EricGummerson
 */
public class BackgroundGlycol extends javax.swing.JPanel {

    public DisplayFrame df;
    public int numRacks;            // number of racks
    public ArrayList<Rack> racks;   // list of racks
    public Font font;               // global fonts
    public Border border;           // global border
    public String img;              // global string of the logo file path
    public String storeName;        // store name
    private Map<String, Component> widgetComponents;

    /**
     * Creates new form BackgroundMain
     *
     * @param df
     */
    public BackgroundGlycol(DisplayFrame df) {
        initComponents();
        this.df = df;
        this.img = "";
        this.storeName = "Store Name";
        this.widgetComponents = new TreeMap<>();
    }

    /**
     * Updates the form with the right information
     *
     * @param racks rack list
     * @param numRacks number of racks to read from the list
     * @param font global font
     * @param border global border
     * @param img global img string for the logo
     * @param storeName global string for the store name
     */
    public void updateRacks(ArrayList<Rack> racks, int numRacks, Font font, Border border, String img, String storeName) {
        this.racks = racks;
        this.numRacks = numRacks;
        this.font = font;
        this.border = border;
        this.img = img;
        this.storeName = storeName;
        this.widgetComponents = new TreeMap<>();
        this.updateView();
    }

    public void updateDisplaySettings(DisplaySettings ds) {
        this.border = ds.getBorder();
        this.font = ds.getFont();
    }

    /**
     * updates the storename
     *
     * @param storeName string of the store name
     */
    public void updateStoreName(String storeName) {
        this.storeName = storeName;
        this.updateView();
    }

    /**
     * updates the image url for the logo
     *
     * @param img string file path of the logo
     */
    public void updateImageURL(String img) {
        this.img = img;
        this.updateView();
    }

    /**
     * updates the font selected from the settings panel
     *
     * @param font Font
     */
    public void updateFont(Font font) {
        this.font = font;
        this.updateView();
    }

    /**
     * Updates the border
     *
     * @param border Border
     */
    public void updateBorder(Border border) {
        this.border = border;
        this.updateView();
    }

    /**
     * Updates the font and bother
     *
     * @param font Font
     * @param border Border
     */
    public void updateFontBorder(Font font, Border border) {
        this.font = font;
        this.border = border;
        this.updateView();
    }

       /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        _Panel_MainPanel = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(1800, 1200));
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName(""); // NOI18N
        setOpaque(false);

        _Panel_MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        _Panel_MainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _Panel_MainPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout _Panel_MainPanelLayout = new javax.swing.GroupLayout(_Panel_MainPanel);
        _Panel_MainPanel.setLayout(_Panel_MainPanelLayout);
        _Panel_MainPanelLayout.setHorizontalGroup(
                _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 1000, Short.MAX_VALUE)
        );
        _Panel_MainPanelLayout.setVerticalGroup(
                _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    /**
     * Sends the clicked point to the display frame to send back to the main
     *
     * @param evt mouse event
     */
    private void _Panel_MainPanelMousePressed(java.awt.event.MouseEvent evt) {
        df.returnClick(evt.getPoint());
    }

    

    /**
     * update the panel
     */
    public void updateView() {

        // Vars used        
        int[] rackGridWidth = new int[this.numRacks + 1];
        int sum = 5;
        rackGridWidth[0] = 3;
        for (int i = 0; i < this.numRacks; i++) {
            rackGridWidth[i + 1] = 3 * racks.get(i).numSuctionGroups;
            sum += rackGridWidth[i + 1];
        }

        int gridXPos, gridYPos, gridWidth, gridHeight;
        Rack r;
        JLabel label;
        JPanel panel;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        _Panel_MainPanel.setLayout(gbl);
        _Panel_MainPanel.removeAll();
        widgetComponents.clear();

        // Store panel info at top
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos = 0;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = sum;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //===========================================================  
        panel = panelTop(img, storeName);
        _Panel_MainPanel.add(panel, c);

        gridYPos += gridHeight;
        c.gridx = 0;
        c.gridy = gridYPos;
        c.weightx = 1;
        c.weighty = 1;
        panel = new JPanel();
        panel.setOpaque(true);
        panel.setBackground(Color.BLACK);
        _Panel_MainPanel.add(new JPanel(), c);       
        
        
        
        // make labels white
        setLabels(_Panel_MainPanel, Colours.White.getCol());
        // do it before last panel

        // Bottom Panel
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 0;
        c.gridx = gridXPos;
        c.gridy = gridYPos + gridHeight;
        gridHeight = 5; // 5 per row for performance   

        c.gridwidth = sum;
        c.gridheight = 1;
        //c.ipady = 100;
        c.ipady = 0;
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        panel = df.panelBottom(numRacks * 2 + 3);
        _Panel_MainPanel.add(panel, c);

        _Panel_MainPanel.revalidate();
        _Panel_MainPanel.repaint();

    }

    /**
     * Gets the widget positions of the current panel These positions are stored
     * in the widgetComponents map which contains the component and a string
     * identifying the component
     *
     * @return Map<String, Rectangle> Key, Rectangle of the spot
     */
    public Map<String, Rectangle> positions() {
        //public void positions() {
        //System.out.println("Positions " + rack.getName());
        Map<String, Rectangle> ioPoints = new TreeMap<>();

        if (widgetComponents.isEmpty()) {
            return null;
        }
        for (Map.Entry<String, Component> entry : widgetComponents.entrySet()) {

            Component p = entry.getValue();
            try {
                //System.out.println("Tooltip: " + ((JLabel) p).getToolTipText());
                if (p instanceof JLabel) {
                    //if (((JLabel) p).getToolTipText() != null) {
                    //System.out.println("Has a tooltip:" + ((JLabel) p).getToolTipText());
                    Rectangle r = p.getBounds();
                    Component par = p;
                    while (par.getParent() != _Panel_MainPanel) {
                        par = par.getParent();
                    }
                    r = SwingUtilities.convertRectangle(par, r, _Panel_MainPanel);
                    //((JLabel) p).setText("x=" + r.getX() + ", y=" + r.getY());

                    Rectangle oldRect = ioPoints.put(entry.getKey(), r);
                    if (oldRect != null) {
                        System.out.println("Replaced " + ((JLabel) p).getToolTipText()
                                + ".\nOld rectangle " + oldRect.toString()
                                + "\nNew rectangle: " + r.toString());
                    }

                }

            } catch (NullPointerException | IllegalComponentStateException e) {
                System.out.println("Error with " + ((JLabel) p).getName());
            }
        }

        return ioPoints;

    }

    /**
     * sets all the labels to a certain color
     *
     * @param p1 container
     * @param c colour
     */
    public void setLabels(Container p1, Color c) {

        for (Component p : p1.getComponents()) {
            if (p instanceof JLabel) {
                ((JLabel) p).setForeground(Color.white);
            } else {
                if (p instanceof JPanel) {
                    setLabels((Container) p, c);
                }
            }
        }

    }


    
    /**
     * Top panel
     *
     * @param imgUrl file path for the image url
     * @param storeName string store name
     * @return JPanel
     */
    public JPanel panelTop(String imgUrl, String storeName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 1;
        c.gridwidth = 10;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // store logo 
        //===========================       
        label = new JLabel();
        if (!"".equals(imgUrl)) {
            ImageIcon icon = new ImageIcon(imgUrl);
            label.setIcon(icon);
        } else {
            label.setText("NO LOGO SELECTED");
        }
        //label.setBorder(border);        
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 10;
        //c.gridy = 0;
        c.gridwidth = 20;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("");
        //widgetComponents.put("Store $/kWh", label);
        //label.setBorder(border);        
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 30;
        //c.gridy = 1;
        c.gridwidth = 10;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("GLYCOL INFO               " + storeName);
        label.setOpaque(true);
        label.setBackground(Color.BLACK);
        label.setForeground(Colours.Gray.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 22));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setBorder(BorderFactory.createLoweredBevelBorder());
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel _Panel_MainPanel;
    // End of variables declaration                   
}
