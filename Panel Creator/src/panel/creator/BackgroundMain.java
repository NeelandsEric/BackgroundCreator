/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel.creator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 *
 * @author EricGummerson
 */
public class BackgroundMain extends javax.swing.JPanel {

    public int numRacks;
    public ArrayList<Rack> racks;
    public Font font;
    public Border border;
    public String img;
    public String storeName;

    /**
     * Creates new form BackgroundMain
     */
    public BackgroundMain() {
        initComponents();
        this.img = "";
    }

    public void updateRacks(ArrayList<Rack> racks, int numRacks, Font font, Border border, String img, String storeName) {
        this.racks = racks;
        this.numRacks = numRacks;
        this.font = font;
        this.border = border;
        this.img = img;
        this.storeName = storeName;
        this.updateView();
    }

    public void updateStoreName(String storeName) {
        this.storeName = storeName;
        this.updateView();
    }

    public void updateImageURL(String img) {
        this.img = img;
        this.updateView();
    }

    public void updateFont(Font font) {
        this.font = font;
        this.updateView();
    }

    public void updateBorder(Border border) {
        this.border = border;
        this.updateView();
    }

    public void updateFontBorder(Font font, Border border) {
        this.font = font;
        this.border = border;
        this.updateView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _Panel_MainPanel = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(1800, 1200));
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName(""); // NOI18N
        setOpaque(false);

        _Panel_MainPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout _Panel_MainPanelLayout = new javax.swing.GroupLayout(_Panel_MainPanel);
        _Panel_MainPanel.setLayout(_Panel_MainPanelLayout);
        _Panel_MainPanelLayout.setHorizontalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        _Panel_MainPanelLayout.setVerticalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // remove int i to be the called function
    public void updateView() {

        // Vars used        
        int[] rackGridWidth = new int[5];
        int sum = 2;
        for (int i = 0; i < this.numRacks; i++) {
            rackGridWidth[i] = 3 * racks.get(i).numSuctionGroups;
            sum += rackGridWidth[i];
        }

        int gridXPos, gridYPos, gridWidth, gridHeight;
        Rack r;
        SuctionGroup sg;
        JLabel label;
        JPanel panel;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        _Panel_MainPanel.setLayout(gbl);
        _Panel_MainPanel.removeAll();

        // Store panel info at top
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos = 0;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = sum;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //===========================================================  
        panel = panelTop(img, storeName);
        _Panel_MainPanel.add(panel, c);

        // First initial cell
        label = new JLabel("Outside Air Temp");
        label.setFont(font);
        panel = new JPanel();
        panel.add(label);
        panel.setBackground(Colours.BlueDark.getCol());
        panel.setBorder(border);
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos = 5;
        gridWidth = 2;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;        
        // Setup next position
        gridXPos += gridWidth;
        //gridYPos += gridHeight;

        // End of Constraints
        //===========================================================        
        _Panel_MainPanel.add(panel, c);

        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i < this.numRacks; i++) {

            r = racks.get(i);
            // Number of suction groups for the rack          

            panel = panelRackName(r.getName());
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups
            //rackGridWidth[i] = 3 * r.numSuctionGroups; // 1 cell per compressor
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            //c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            //c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        //===========================
        // RACKS STATUS Condenser Fans
        //===========================
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = 2;
        gridHeight = 10;
        // Constraints        
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0;
        c.weighty = 1; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight * 2;
        c.ipady = 0;
        //c.ipady = 0;        
        // Setup next position
        gridXPos += gridWidth;
        //gridYPos += gridHeight;
        // End of Constraints
        //=========================================================== 

        //===========================================================
        GridBagLayout gblStatus = new GridBagLayout();
        GridBagConstraints c1 = new GridBagConstraints();
        //===========================================================            
        // Constraints         for c2
        c1.fill = GridBagConstraints.BOTH;
        c1.weightx = 1;
        c1.weighty = 0; // No space between bottom and below row?        
        c1.gridx = 0;
        c1.gridy = 0;
        c1.gridwidth = 2;
        c1.gridheight = 5; // 2 spots per row
        c1.ipady = 0;
        //c1.ipadx = 0;                  
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        // Rack status
        panel = new JPanel(gblStatus);
        label = new JLabel("Condenser Fans");
        label.setFont(font);
        //label.setBorder(border);
        panel.add(label, c1);
        //===========================================================            
        // Constraints         for c1
        c1.fill = GridBagConstraints.HORIZONTAL;
        //c1.weightx = 1;
        c1.weighty = 1; // No space between bottom and below row?        
        //c1.gridx = 0;
        c1.gridy = 5;
        //c1.gridwidth = 2;
        c1.gridheight = 14; // 2 spots per row
        c1.ipady = 0;
        //c1.ipadx = 0;                  
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        label = new JLabel("Suction Groups");
        label.setFont(font);
        //label.setBorder(border);
        panel.add(label, c1);

        label = new JLabel("blank");
        label.setBorder(border);
        //c1.gridy = 19;
        //c1.gridheight = 1;
        //c1.ipady = 75;
        //panel.add(label, c1);

        panel.setBorder(border);
        panel.setBackground(Colours.BlueLightest.getCol());
        _Panel_MainPanel.add(panel, c);

        // Add condensers
        for (int i = 0; i < this.numRacks; i++) {
            r = racks.get(i);
            // Number of suction groups for the rack
            //===========================
            // RACK CONDENSER
            //===========================
            panel = panelCondenser(r.getNumCondenserFans(), r.getNumSuctionGroups());

            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            c.gridheight = gridHeight;
            c.ipady = 0;
            // We dont setup next position because we are adding suction groups still
            //gridXPos += rackGridWidth[i];
            //gridYPos += gridHeight;
            // End of Constraints
            //===========================================================
            panel.setBackground(Colours.RedDark.getCol());
            _Panel_MainPanel.add(panel, c);

            // Suction Groups - Compressors then Systems   
            for (int j = 0; j < r.numSuctionGroups; j++) {

                sg = r.getSuctionGroupIndex(j);

                // Compressor
                panel = panelCompressor(i, j, r.getNumSuctionGroups());
                //===========================================================            
                // Constraints        
                //c.fill = GridBagConstraints.BOTH;        
                c.weightx = 1;
                c.weighty = 0; // No space between bottom and below row?        
                c.gridx = gridXPos;
                c.gridy = gridYPos + gridHeight;
                c.gridwidth = 1;
                //c.gridheight = gridHeight;
                //c.ipady = 100;
                //c.ipady = 0;                  
                // We dont setup next position because we are adding suction groups still
                gridXPos += 1;
                //gridYPos += gridHeight;
                // End of Constraints
                //===========================================================
                panel.setBackground(Colours.OrangeDark.getCol());
                _Panel_MainPanel.add(panel, c);
                //c.gridx = gridXPos;
                //c.fill = GridBagConstraints.HORIZONTAL;

                //gridWidth = 1;
                //c.gridwidth = gridWidth;
                //gridXPos += gridWidth;
                // System
                panel = panelSystems(i, j, r.getNumSuctionGroups());
                //===========================================================            
                // Constraints        
                //c.fill = GridBagConstraints.BOTH;        
                //c.weightx = 1;
                //c.weighty = 0; // No space between bottom and below row?        
                c.gridx = gridXPos;
                //c.gridy = gridYPos;
                c.gridwidth = 2;
                //c.gridheight = gridHeight;
                //c.ipady = 100;
                //c.ipady = 0;                  
                // We dont setup next position because we are adding suction groups still
                gridXPos += 2;
                //gridYPos += gridHeight;
                // End of Constraints
                //===========================================================
                panel.setBackground(Colours.OrangeDark.getCol());
                _Panel_MainPanel.add(panel, c);
            }
        }

        //===========================
        // Performance
        //===========================
        //===========================================================            
        // Constraints     
        gridYPos += (gridHeight * 2);
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 0;
        c.weighty = 1; // No space between bottom and below row?        
        c.gridx = 0;
        c.gridy = gridYPos; // Set new position based off previous component
        gridHeight = 20; // 5 per row for performance
        c.gridwidth = 2;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still
        gridXPos = 2;
        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        GridBagLayout gblPer = new GridBagLayout();
        GridBagConstraints c2 = new GridBagConstraints();
        //===========================================================            
        // Constraints         for c2
        c2.fill = GridBagConstraints.BOTH;
        c2.weightx = 1;
        c2.weighty = 1; // No space between bottom and below row?        
        c2.gridx = 0;
        c2.gridy = 0;
        c2.gridwidth = 2;
        c2.gridheight = 1; // 2 spots per row
        //c2.ipady = 20;
        //c2.ipadx = 0;                  
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        panel = new JPanel();
        panel.setLayout(gblPer);

        // Rack status
        label = new JLabel("Performance");
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        //=========================================
        label = new JLabel("Predicted");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        //=========================================
        label = new JLabel("Actual");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLightest.getCol());
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        //=========================================
        label = new JLabel("Difference");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        //=========================================
        //panel.setBorder(border);        
        _Panel_MainPanel.add(panel, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        //c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = gridXPos;
        //c.gridy = gridYPos;
        gridHeight = 4; // 5 per row for performance          
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i < this.numRacks; i++) {

            panel = panelPerformance();
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups            
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            //c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        //===========================
        // Operating Costs
        //===========================
        //===========================================================            
        // Constraints     
        gridYPos += gridHeight;
        gridXPos = 0;
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos; // Set new position based off previous component
        gridHeight = 20; // 5 per row for performance
        c.gridwidth = 2;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        GridBagLayout gblOp = new GridBagLayout();
        GridBagConstraints c3 = new GridBagConstraints();
        //===========================================================            
        // Constraints         for c2
        c3.fill = GridBagConstraints.BOTH;
        c3.weightx = 1;
        c3.weighty = 1; // No space between bottom and below row?        
        c3.gridx = 0;
        c3.gridy = 0;
        c3.gridwidth = 2;
        c3.gridheight = 5; // 5 spots per row
        //c3.ipady = 20;
        //c3.ipadx = 0;                  
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        panel = new JPanel();
        panel.setLayout(gblOp);

        // Rack status
        label = new JLabel("Operating");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================
        // Go down and half the width for the rest
        c3.gridy += 5;
        c3.gridwidth = 1;
        c3.gridheight = 20;
        c3.weighty = 0;
        //=========================================
        label = new JLabel("<html>Operating<br>Cost<br>Rate ¢</html>");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================
        // Go right        
        c3.gridx += 1;
        c3.gridheight = 5;
        c3.weighty = 1;
        //=========================================
        label = new JLabel("Day");
        label.setOpaque(true);
        label.setBackground(Colours.GreenLight.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================
        // Go down
        c3.gridy += 5;
        //=========================================
        label = new JLabel("Month");
        label.setOpaque(true);
        label.setBackground(Colours.GreenLightest.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================       
        // Go down
        c3.gridy += 5;
        //=========================================
        label = new JLabel("Year");
        label.setOpaque(true);
        label.setBackground(Colours.GreenLight.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font);
        label.setBorder(border);
        panel.add(label, c3);
        panel.setBorder(border);
        _Panel_MainPanel.add(panel, c);

        // Operating Costs constraints
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        //c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 2;
        //c.gridy = gridYPos;
        gridHeight = 20; // 5 per row for performance          
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i < this.numRacks; i++) {

            panel = panelOperating();
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups            
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            //c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        // make labels white
        setLabels(_Panel_MainPanel, Colours.White.getCol());
        // do it before last panel

        // Bottom Panel
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 0;
        c.gridx = gridXPos;
        c.gridy = gridYPos + gridHeight;
        gridHeight = 5; // 5 per row for performance   

        c.gridwidth = sum;
        c.gridheight = 1;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        panel = panelBottom(this.numRacks);
        _Panel_MainPanel.add(panel, c);

        _Panel_MainPanel.revalidate();
        _Panel_MainPanel.repaint();

    }

    public void setLabels(Container p1, Color c) {

        for (Component p : p1.getComponents()) {
            if (p instanceof JLabel) {
                ((JLabel) p).setForeground(Color.white);
            } else {
                if (p instanceof JPanel) {
                    setLabels((Container) p, c);
                }
            }
        }

    }

    public JPanel panelRackName(String rackName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        // Return a panel containing two labels
        JPanel panel = new JPanel(gbl);
        //===========================
        // RACK NAMES
        //===========================

        label = new JLabel(rackName);
        label.setFont(font);
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.gridy = 0;
        //c.ipady = 100;
        //c.gridheight = 5;
        //label.setOpaque(true);
        //label.setBackground(new java.awt.Color((int) (Math.random() * 256), (int) (Math.random() * 256), (int) (Math.random() * 256)));
        panel.add(label, c);

        // rack SEI
        label = new JLabel("SEI");
        label.setFont(font);
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.gridx = 1;
        c.gridy = 0;
        //c.gridheight = 2;

        //label.setOpaque(true);
        //label.setBackground(new java.awt.Color((int) (Math.random() * 256), (int) (Math.random() * 256), (int) (Math.random() * 256)));
        panel.add(label, c);
        c.gridx = 0;
        c.gridy = 1;
        c.ipady = 75;
        panel.add(new JLabel(), c);
        panel.setBorder(border);
        panel.setBackground(Colours.BlueDark.getCol());
        return panel;
    }

    public JPanel panelCondenser(int numCond, int numSg) {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        int numCols = numSg + 1;
        double numPerCol = Math.ceil((double) numCond / numCols);
        //System.out.println("Ceil of " + numCond + "/" + numCols + "=" + numPerCol);

        int numAdded = 0;
        //===========================
        // RACK CONDENSER
        //===========================
        //label = new JLabel("Condensers");
        //label.setFont(font);
        //label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.HORIZONTAL;
        //c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        //c.gridy = 0;
        //c.gridheight = 1;
        //panel.add(label, c);

        int colIndex = 0;
        int rowIndex = 0;

        for (int i = 1; i <= numCond; i++) {

            if (numAdded < numPerCol) {
                c.gridx = colIndex;
                c.gridy = rowIndex++;
                numAdded++;
            } else {
                numAdded = 1;
                colIndex++;
                rowIndex = 0;
                c.gridx = colIndex;
                c.gridy = rowIndex++;
            }

            label = new JLabel("Fan " + i);
            label.setFont(font);
            if (numAdded % 2 == 0) {
                label.setOpaque(true);
                label.setBackground(Colours.RedLightest.getCol());
            } else {
                label.setOpaque(true);
                label.setBackground(Colours.RedLight.getCol());
            }
            //label.setBorder(border);
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            panel.add(label, c);
        }

        panel.setBackground(Colours.BlueLightest.getCol());
        panel.setBorder(border);
        return panel;
    }

    public JPanel panelCompressor(int rackIndex, int sgIndex, int numSg) {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        SuctionGroup sg = racks.get(rackIndex).getSuctionGroupIndex(sgIndex);
        int numComp = sg.getNumCompressors();
        int numCols = numSg + 1;
        double numPerCol = Math.ceil((double) numComp / numCols);
        //System.out.println("Ceil of " + numCond + "/" + numCols + "=" + numPerCol);
        //System.out.println("Num compressors in bg: " + numComp);

        int numAdded = 0;

        //===========================
        // RACK SUCTION GROUP NAME
        //===========================
        label = new JLabel(sg.getName());
        c.gridwidth = 2;
        c.weightx = 1;
        c.weighty = 0;
        c.gridx = 0;
        c.gridy = 0;        
        label.setFont(font);
        c.fill = GridBagConstraints.HORIZONTAL;
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setOpaque(true);
        label.setBackground(Colours.OrangeDark.getCol());
        panel.add(label, c);

        c.gridy = 1;
        c.weightx = 1;
        c.weighty = 1;
        c.gridwidth = 1;
        c.gridheight = 1;

        int colIndex = 0;
        int rowIndex = 1;

        for (int i = 1; i <= numComp; i++) {

            if (numAdded < numPerCol) {
                c.gridx = colIndex;
                c.gridy = rowIndex++;
                numAdded++;
            } else {
                numAdded = 1;
                colIndex++;
                rowIndex = 1;
                c.gridx = colIndex;
                c.gridy = rowIndex++;
            }

            String text = sg.getCompressorNameIndex(i - 1);
            label = new JLabel(text);
            label.setFont(font);
            //label.setBorder(border);
            if (numAdded % 2 == 0) {
                label.setOpaque(true);
                label.setBackground(Colours.OrangeLightest.getCol());
            } else {
                label.setOpaque(true);
                label.setBackground(Colours.OrangeLight.getCol());
            }
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            panel.add(label, c);
        }

        //panel.setBackground(Colours.LightestBlue.getCol());
        panel.setBorder(border);
        return panel;
        
    }

    public JPanel panelSystems(int rackIndex, int sgIndex, int numSg) {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        SuctionGroup sg = racks.get(rackIndex).getSuctionGroupIndex(sgIndex);        
        int numSys = sg.getNumSystems();
          int numCols = numSg + 1;
        double numPerCol = Math.ceil((double) numSys / numCols);
        //System.out.println("Ceil of " + numCond + "/" + numCols + "=" + numPerCol);
        //System.out.println("Num compressors in bg: " + numComp);

        int numAdded = 0;

        //===========================
        // RACK SUCTION GROUP NAME
        //===========================
        label = new JLabel(sg.getName());
        c.gridwidth = 2;
        c.weightx = 1;
        c.weighty = 0;
        c.gridx = 0;
        c.gridy = 0;        
        label.setFont(font);
        c.fill = GridBagConstraints.HORIZONTAL;
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setOpaque(true);
        label.setBackground(Colours.OrangeDark.getCol());
        panel.add(label, c);

        c.gridy = 1;
        c.weightx = 1;
        c.weighty = 1;
        c.gridwidth = 1;
        c.gridheight = 1;

        int colIndex = 0;
        int rowIndex = 1;

        for (int i = 1; i <= numSys; i++) {

            if (numAdded < numPerCol) {
                c.gridx = colIndex;
                c.gridy = rowIndex++;
                numAdded++;
            } else {
                numAdded = 1;
                colIndex++;
                rowIndex = 1;
                c.gridx = colIndex;
                c.gridy = rowIndex++;
            }

            String text = sg.getSystemNameIndex(i - 1);
            label = new JLabel(text);
            label.setFont(font);
            //label.setBorder(border);
            if (numAdded % 2 == 0) {
                label.setOpaque(true);
                label.setBackground(Colours.OrangeLightest.getCol());
            } else {
                label.setOpaque(true);
                label.setBackground(Colours.OrangeLight.getCol());
            }
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            panel.add(label, c);
        }

        //panel.setBackground(Colours.LightestBlue.getCol());
        panel.setBorder(border);
        return panel;
        
    }

    public JPanel panelPerformance() {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Cost");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 0;
        c.gridheight = 1;
        c.ipady = 3;

        label.setFont(font);
        panel.add(label, c);
        // KW
        label = new JLabel("  KW  ");
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;

        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font);
        panel.add(label, c);
        c.ipady = 20;

        for (int i = 1; i <= 3; i++) {
            for (int j = 0; j < 2; j++) {
                label = new JLabel();
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
                c.fill = GridBagConstraints.BOTH;
                label.setBorder(border);
                c.gridx = j;
                c.gridy = i;
                label.setOpaque(true);
                if (j == 0) {
                    // green
                    switch (i) {
                        case 1:
                        case 3:
                            label.setBackground(Colours.GreenLight.getCol());
                            break;
                        case 2:
                            label.setBackground(Colours.GreenLightest.getCol());
                            break;
                    }
                } else {
                    switch (i) {
                        case 1:
                        case 3:
                            label.setBackground(Colours.BlueLight.getCol());
                            break;
                        case 2:
                            label.setBackground(Colours.BlueLightest.getCol());
                            break;
                    }
                }
                panel.add(label, c);
            }
        }

        // Cost -> KW
        // Label | Label 
        // Label | Label
        // Label | Label
        //panel.setBorder(border);
        return panel;

    }

    public JPanel panelOperating() {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Current Year");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 0;
        c.gridheight = 1;
        c.ipady = 3;

        label.setFont(font);
        panel.add(label, c);
        // KW
        label = new JLabel("Previous Year");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        //c.weightx = 1;
        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font);
        panel.add(label, c);
        c.ipady = 20;

        for (int i = 1; i <= 3; i++) {
            for (int j = 0; j < 2; j++) {
                label = new JLabel();
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
                c.fill = GridBagConstraints.BOTH;
                label.setBorder(border);
                c.gridx = j;
                c.gridy = i;
                label.setOpaque(true);
                switch (i) {
                    case 1:
                    case 3:
                        label.setBackground(Colours.GreenLight.getCol());
                        break;
                    case 2:
                        label.setBackground(Colours.GreenLightest.getCol());
                        break;
                }
                panel.add(label, c);
            }
        }

        // Cost -> KW
        // Label | Label 
        // Label | Label
        // Label | Label
        //panel.setBorder(border);
        return panel;

    }

    public JPanel panelBottom(int numRacks) {

        JButton button;
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 0;
        c.gridwidth = 5;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // Powered by label
        //===========================
        label = new JLabel("Powered by N.O.E.L");
        label.setForeground(Colours.White.getCol());
        //label.setBorder(border);
        label.setFont(new Font("Arial", Font.BOLD, 14));
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        panel.add(label, c);
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 5;
        //c.gridy = 0;
        c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        //==========================================================
        //                  Buttons
        //==========================================================
        // Main button
        //button = new JButton("<html><font color = green>Main</font></html>");        
        button = new JButton("Main");
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.setEnabled(false);
        panel.add(button, c);
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        //c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 6;
        //c.gridy = 0;
        //c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        // Rack buttons
        for (int i = 0; i < numRacks; i++) {
            c.gridx += 1;
            button = new JButton(racks.get(i).getName());
            button.setFont(new Font("Arial", Font.BOLD, 14));
            button.setAlignmentX((Component.CENTER_ALIGNMENT));
            panel.add(button, c);
        }

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        //c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx += 1;
        //c.gridy = 0;
        //c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        // Load Button
        button = new JButton("Loads");
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        panel.add(button, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx += 1;
        //c.gridy = 0;
        c.gridwidth = 5;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Map Label
        label = new JLabel("Map");
        label.setFont(new Font("Arial", Font.BOLD, 14));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    public JPanel panelTop(String imgUrl, String storeName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 1;
        c.gridwidth = 10;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // store logo 
        //===========================       
        label = new JLabel();
        if (!"".equals(imgUrl)) {
            ImageIcon icon = new ImageIcon(imgUrl);
            label.setIcon(icon);
        } else {
            label.setText("NO LOGO SELECTED");
        }
        //label.setBorder(border);        
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 10;
        //c.gridy = 0;
        c.gridwidth = 20;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("");
        //label.setBorder(border);        
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 30;
        //c.gridy = 1;
        c.gridwidth = 10;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("OPERATIONAL OVERVIEW                 " + storeName);
        label.setOpaque(true);
        label.setBackground(Color.BLACK);
        label.setForeground(Colours.Gray.getCol());
        label.setFont(new Font("Arial", Font.BOLD, 18));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setBorder(BorderFactory.createRaisedBevelBorder());
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel _Panel_MainPanel;
    // End of variables declaration//GEN-END:variables
}
