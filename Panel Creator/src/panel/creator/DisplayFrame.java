/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel.creator;

import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 * The main display frame
 * @author EricGummerson
 */
public class DisplayFrame extends javax.swing.JFrame {

    public BackgroundMain bg; // main panel 
    // Loads panel
    public MainFrame mf;
    public ArrayList<BackgroundRack> rackTabs;
    public int numRacks;

    /**
     * Creates new form DisplayFrame
     *
     * @param mf
     */
    public DisplayFrame(MainFrame mf) {
        initComponents();
        this.mf = mf;
        rackTabs = new ArrayList<>();
        bg = new BackgroundMain();
        numRacks = 5;
        _TabbedPane_Tabs.add("Main", bg);
        for (int i = 1; i <= numRacks; i++) {
            BackgroundRack br = new BackgroundRack((i - 1));
            _TabbedPane_Tabs.add("Rack " + i, br);
            rackTabs.add(br);
        }
        _TabbedPane_Tabs.add("Loads", new JPanel());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _TabbedPane_Tabs = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Customized Backgrounds");
        setAutoRequestFocus(false);
        setLocation(new java.awt.Point(940, 0));
        setMaximumSize(new java.awt.Dimension(1800, 1200));
        setMinimumSize(new java.awt.Dimension(1200, 900));
        setPreferredSize(new java.awt.Dimension(900, 600));

        _TabbedPane_Tabs.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                _TabbedPane_TabsComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_TabbedPane_Tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_TabbedPane_Tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _TabbedPane_TabsComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event__TabbedPane_TabsComponentResized
        // TODO add your handling code her
        if (mf != null) {
            mf.updateDisplaySize(this.getSize());
            this.setPreferredSize(this.getSize());
        }


    }//GEN-LAST:event__TabbedPane_TabsComponentResized

    public void updateDisplays(Rack[] racks, int numRacks, Font f, Border b, String img, String sn, String[] rackNames) {

        int selected = _TabbedPane_Tabs.getSelectedIndex();
        // update the main
        bg.updateRacks(racks, numRacks, f, b, img, sn);

        int nt = _TabbedPane_Tabs.getTabCount();
        for (int i = nt - 2; i > numRacks; i--) {
            _TabbedPane_Tabs.remove(i);
        }

        for (int i = 0; i < numRacks; i++) {
            if (rackTabs.get(i) != null) {
                rackTabs.get(i).updateRacks(racks[i], numRacks, f, b, img, sn, rackNames);
                _TabbedPane_Tabs.add(rackTabs.get(i), i + 1);
                _TabbedPane_Tabs.setTitleAt(i + 1, rackNames[i]);
            }
        }

        this.pack();
        _TabbedPane_Tabs.setSelectedIndex(selected);

    }

    public void updateFont(Font f) {
        bg.updateFont(f);
        for (int i = 0; i < numRacks; i++) {
            if (rackTabs.get(i) != null) {
                rackTabs.get(i).updateFont(f);
            }
        }
    }

    public void updateBorder(Border b) {
        bg.updateBorder(b);
        for (int i = 0; i < numRacks; i++) {
            if (rackTabs.get(i) != null) {
                rackTabs.get(i).updateBorder(b);
            }
        }
    }

    public void updateLogo() {
        bg.updateImageURL("");
        for (int i = 0; i < numRacks; i++) {
            if (rackTabs.get(i) != null) {
                rackTabs.get(i).updateImageURL("");
            }
        }
    }

    public void updateLogo(String img) {
        bg.updateImageURL(img);
        for (int i = 0; i < numRacks; i++) {
            if (rackTabs.get(i) != null) {
                rackTabs.get(i).updateImageURL(img);
            }
        }
    }

    public void setNewSize(int width, int height) {
        this.setSize(width, height);

    }

    public Component getCurrentPane() {
        return _TabbedPane_Tabs.getSelectedComponent();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane _TabbedPane_Tabs;
    // End of variables declaration//GEN-END:variables
}
