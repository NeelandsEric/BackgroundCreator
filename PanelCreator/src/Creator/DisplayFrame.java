package Creator;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 * The display frame which shows the different backgrounds
 *
 * @author EricGummerson
 */
public class DisplayFrame extends javax.swing.JFrame {

    public BackgroundMain bg; // main panel 
    // Loads panel
    public MainFrame mf;
    public ArrayList<BackgroundRack> rackTabs;
    public ArrayList<BackgroundLoad> loadTabs;
    public BackgroundFinancial bgf;
    public BackgroundEnergy bge;
    public BackgroundGlycol bgg;
    public ControlSettings cs;
    public DisplaySettings ds;
    private boolean stopUpdate;

    /**
     * Creates new form DisplayFrame
     *
     * @param mf
     * @param css
     * @param dss
     */
    public DisplayFrame(MainFrame mf, ControlSettings css, DisplaySettings dss) {
        initComponents();
        this.stopUpdate = true;
        this.mf = mf;
        this.cs = css;
        this.ds = dss;
        rackTabs = new ArrayList<>();
        loadTabs = new ArrayList<>();
        bg = new BackgroundMain(this);
        _TabbedPane_Tabs.add("Main", bg);

        // Racks
        for (int i = 1; i <= this.cs.getNumRacks(); i++) {
            BackgroundRack br = new BackgroundRack(this, (i - 1));
            _TabbedPane_Tabs.add("Rack " + i, br);
            rackTabs.add(br);
        }

        // Loads
        for (int i = 1; i <= this.cs.getNumRacks(); i++) {

            BackgroundLoad bl = new BackgroundLoad(this, (i - 1));
            _TabbedPane_Tabs.add("Loads " + i, bl);
            loadTabs.add(bl);
        }

        bgf = new BackgroundFinancial(this);
        bge = new BackgroundEnergy(this);
        bgg = new BackgroundGlycol(this);
        _TabbedPane_Tabs.add("Financial", bgf);
        _TabbedPane_Tabs.add("Energy", bge);
        _TabbedPane_Tabs.add("Glycol", bgg);

        this.stopUpdate = false;
    }

    public void updateSettings(DisplaySettings dss) {

        //System.out.println("Size update ds " + ds.getDisplayWidth() + ", " + ds.getDisplayHeight());
        this.ds = dss;
        //System.out.println("Size update dss " + dss.getDisplayWidth() + ", " + dss.getDisplayHeight());

        this.stopUpdate = true;
        this.setNewSize(ds.getDisplayWidth(), ds.getDisplayHeight());

        bg.updateDisplaySettings(ds);

        for (int i = 0; i < cs.getNumRacks(); i++) {
            if (rackTabs.get(i) != null) {
                rackTabs.get(i).updateDisplaySettings(ds);
            }
        }

        for (int i = 0; i < cs.getNumRacks(); i++) {
            if (loadTabs.get(i) != null) {
                loadTabs.get(i).updateDisplaySettings(ds);
            }
        }

        bgf.updateDisplaySettings(ds);
        bge.updateDisplaySettings(ds);
        bgg.updateDisplaySettings(ds);

        this.stopUpdate = false;
    }

    public boolean isStopUpdate() {
        return stopUpdate;
    }

    public void setStopUpdate(boolean stopUpdate) {
        this.stopUpdate = stopUpdate;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _TabbedPane_Tabs = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Customized Backgrounds");
        setAutoRequestFocus(false);
        setLocation(new java.awt.Point(940, 0));
        setMinimumSize(new java.awt.Dimension(1200, 900));

        _TabbedPane_Tabs.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                _TabbedPane_TabsComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_TabbedPane_Tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_TabbedPane_Tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * resize the display
     *
     * @param evt
     */
    private void _TabbedPane_TabsComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event__TabbedPane_TabsComponentResized
        // TODO add your handling code her
        if (mf != null && !stopUpdate) {

            mf.updateDisplaySettingsSize(this.getSize());
            this.setPreferredSize(this.getSize());
            if (bg != null) {
                int w = bg.getWidth();
                int h = bg.getHeight();
                this.setTitle("Customized Backgrounds " + w + "x" + h);
                updateDisplays(cs, ds);
            }

        }
    }//GEN-LAST:event__TabbedPane_TabsComponentResized

    /**
     * A button is clicked
     *
     * @param panelID
     */
    private void buttonClick() {

        Point p = this.getMousePosition();
        p.x -= 10;
        p.y -= 57;
        returnClick(p);

    }

    public void returnClick(Point point) {
        mf.returnClick(point);
    }

    public void setTab(int tab) {
        if (_TabbedPane_Tabs.getTabCount() > tab) {
            _TabbedPane_Tabs.setSelectedIndex(tab);
        }
    }

    public Map<String, Map<String, Rectangle>> getWidgetPositions() {

        this.pack();
        Map<String, Map<String, Rectangle>> masterMap = new LinkedHashMap<>();

        masterMap.put("Main", bg.positions());

        // Racks
        for (BackgroundRack b : rackTabs) {
            if (masterMap.containsKey("Rack")) {
                masterMap.get("R: " + b.rack.getName()).putAll(b.positions());
            } else {
                masterMap.put("R: " + b.rack.getName(), b.positions());
            }
        }

        // Loads
        for (BackgroundLoad b : loadTabs) {
            if (masterMap.containsKey("Load")) {
                masterMap.get("L: " + b.rack.getName().replace("Rack", "Load")).putAll(b.positions());
            } else {
                masterMap.put("L: " + b.rack.getName().replace("Rack", "Load"), b.positions());
            }
        }

        masterMap.put("Financial", bgf.positions());
        masterMap.put("Energy", bge.positions());
        masterMap.put("Glycol", bgg.positions());

        return masterMap;
    }

    /**
     * Updates the form with the right information
     *
     * @param css
     * @param dss
     */
    public void updateDisplays(ControlSettings css, DisplaySettings dss) {
        this.cs = css;
        this.ds = dss;

        if (!stopUpdate) {
            DisplayFrame t = this;
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {

                    try {
                        int selected = _TabbedPane_Tabs.getSelectedIndex();
                        int nt = _TabbedPane_Tabs.getTabCount();
                        // update the main         
                        _TabbedPane_Tabs.removeAll();

                        bg.updateRacks(cs.getRacks(), cs.getNumRacks(), ds.getFont(), ds.getBorder(),
                                cs.getImgStr(), cs.getStoreName());
                        _TabbedPane_Tabs.add("Main", bg);

                        // Add Racks
                        for (int i = 0; i < cs.getNumRacks(); i++) {
                            if (rackTabs.size() > i) {
                                if (rackTabs.get(i) != null) {
                                    rackTabs.get(i).updateRacks(cs.getRackIndex(i), cs.getNumRacks(), ds.getFont(), ds.getBorder(), cs.getImgStr(), cs.getStoreName(), cs.getRackNames());
                                    _TabbedPane_Tabs.add(cs.getRackNames()[i], rackTabs.get(i));
                                }
                            } else {
                                rackTabs.add(new BackgroundRack(t, i));
                                rackTabs.get(i).updateRacks(cs.getRackIndex(i), cs.getNumRacks(), ds.getFont(), ds.getBorder(), cs.getImgStr(), cs.getStoreName(), cs.getRackNames());
                                _TabbedPane_Tabs.add(cs.getRackNames()[i], rackTabs.get(i));
                            }
                        }

                        for (int i = 0; i < cs.getNumRacks(); i++) {
                            if (loadTabs.size() > i) {
                                if (loadTabs.get(i) != null) {
                                    loadTabs.get(i).updateRack(cs.getRackIndex(i), cs.getNumRacks(), ds.getFont(), ds.getBorder(), cs.getImgStr(), cs.getStoreName(), cs.getRackNames());
                                    _TabbedPane_Tabs.add(cs.getRackNames()[i].replace("Rack", "Load"), loadTabs.get(i));
                                }
                            } else {
                                loadTabs.add(new BackgroundLoad(t, i));
                                loadTabs.get(i).updateRack(cs.getRackIndex(i), cs.getNumRacks(), ds.getFont(), ds.getBorder(), cs.getImgStr(), cs.getStoreName(), cs.getRackNames());
                                _TabbedPane_Tabs.add(cs.getRackNames()[i].replace("Rack", "Load"), loadTabs.get(i));
                            }
                        }

                        bgf.updateRacks(cs.getRacks(), cs.getNumRacks(), ds.getFont(), ds.getBorder(), cs.getImgStr(), cs.getStoreName());
                        bge.updateRacks(cs.getRacks(), cs.getNumRacks(), ds.getFont(), ds.getBorder(), cs.getImgStr(), cs.getStoreName());
                        bgg.updateRacks(cs.getRacks(), cs.getNumRacks(), ds.getFont(), ds.getBorder(), cs.getImgStr(), cs.getStoreName());

                        _TabbedPane_Tabs.add("Financial", bgf);
                        _TabbedPane_Tabs.add("Energy", bge);
                        _TabbedPane_Tabs.add("Glycol", bgg);

                        if (nt != _TabbedPane_Tabs.getTabCount()) {
                            // Number of tabs changed, configure the previous selected tab

                            if (selected == (nt - 2)) {       // Energy
                                selected = _TabbedPane_Tabs.getTabCount() - 2;
                            } else if (selected == (nt - 1)) { // Glycol
                                selected = _TabbedPane_Tabs.getTabCount() - 1;
                            } else if (selected >= _TabbedPane_Tabs.getTabCount()) {
                                // Previously selected index is more than the number of tabs
                                selected = _TabbedPane_Tabs.getTabCount() - (nt - selected);
                            } else {
                                selected = 0;
                            }
                        }
                        _TabbedPane_Tabs.setSelectedIndex(selected);
                        t.pack();
                        int w = bg.getWidth();
                        int h = bg.getHeight();
                        t.setTitle("Customized Backgrounds " + w + "x" + h);

                    } catch (NullPointerException e) {
                        System.out.println("Probably that tree map null pointer exception");
                    }
                }

            });
        }

    }

    /**
     * update the logo
     *
     * @param img String file path
     */
    public void updateLogo(String img) {
        bg.updateImageURL(img);
        for (int i = 0; i < cs.getNumRacks(); i++) {
            if (rackTabs.get(i) != null) {
                rackTabs.get(i).updateImageURL(img);
            }
        }
        for (int i = 0; i < cs.getNumRacks(); i++) {
            if (loadTabs.get(i) != null) {
                loadTabs.get(i).updateImageURL("");
            }
        }
        bgf.updateImageURL(img);
        bge.updateImageURL(img);
        bgg.updateImageURL(img);
    }

    /**
     * sets the size of the display frame
     *
     * @param width the width of the frame
     * @param height the height of the frame
     */
    public void setNewSize(int width, int height) {
        this.setSize(width, height);
        this.setPreferredSize(new Dimension(width, height));

    }

    /**
     * gets the selected panel on the tabbed pane
     *
     * @return component
     */
    public Component getCurrentPane() {
        return _TabbedPane_Tabs.getSelectedComponent();
    }

    public Component[] getPanelPictures() {
        Component[] c = new Component[cs.getNumRacks() * 2 + 4];

        c[0] = bg;

        for (int i = 1; i <= cs.getNumRacks(); i++) {
            c[i] = rackTabs.get(i - 1);
        }

        for (int i = 1; i <= cs.getNumRacks(); i++) {
            c[i + cs.getNumRacks()] = loadTabs.get(i - 1);
        }

        c[c.length - 3] = bgf;
        c[c.length - 2] = bge;
        c[c.length - 1] = bgg;

        return c;

    }

    /**
     * Creates the bottom panel
     *
     * @param panelIndex
     * @return JPanel
     */
    public JPanel panelBottom(int panelIndex) {

        JButton button;
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);
        Font font = ds.getFont();
        Border border = ds.getBorder();
        int numRacks = cs.getNumRacks();
        String[] rackNames = cs.getRackNames();
        int buttonsAdded = 0;

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 0;
        c.gridwidth = 5;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // Powered by label
        //===========================
        label = new JLabel("Powered by N.O.E.L");
        label.setForeground(Colours.White.getCol());
        //label.setBorder(border);
        label.setFont(font.deriveFont(Font.BOLD, 20));
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 5;
        //c.gridy = 0;
        c.gridwidth = 1;
        c.gridheight = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        //==========================================================
        //                  Buttons
        //==========================================================
        // Main button
        //button = new JButton("<html><font color = green>Main</font></html>");        
        button = new JButton("Main");
        if (panelIndex == buttonsAdded) {
            button.setEnabled(false);
        }
        buttonsAdded++;
        button.setFont(font.deriveFont(Font.BOLD, 17));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonClick();
            }
        });
        panel.add(button, c);

        // Glycol Button
        c.gridy = 1;
        button = new JButton("Glycol");
        if (panelIndex == (numRacks * 2 + 3)) {
            button.setEnabled(false);
        }
        buttonsAdded++;
        button.setFont(font.deriveFont(Font.BOLD, 17));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonClick();
            }
        });
        panel.add(button, c);

        c.gridx++;

        // Rack buttons
        for (int i = 0; i < numRacks; i++) {

            // Loads
            c.gridy = 1;
            button = new JButton(rackNames[i].replace("Rack", "Load"));
            if (panelIndex == (i + numRacks + 1)) {
                button.setEnabled(false);
            }
            buttonsAdded++;
            button.setFont(font.deriveFont(Font.BOLD, 17));
            button.setAlignmentX((Component.CENTER_ALIGNMENT));
            button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    buttonClick();
                }
            });
            panel.add(button, c);
            c.gridy = 0;

            button = new JButton(rackNames[i]);
            if (panelIndex == (i + 1)) {
                button.setEnabled(false);
            }
            buttonsAdded++;
            button.setFont(font.deriveFont(Font.BOLD, 17));
            button.setAlignmentX((Component.CENTER_ALIGNMENT));
            button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    buttonClick();
                }
            });
            panel.add(button, c);
            c.gridx += 1;

        }

        // Financial Button
        c.gridx += 1;
        button = new JButton("Financial");
        if (panelIndex == (numRacks * 2 + 1)) {
            button.setEnabled(false);
        }
        buttonsAdded++;
        button.setFont(font.deriveFont(Font.BOLD, 17));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonClick();
            }
        });
        panel.add(button, c);

        // Energy Button
        c.gridy = 1;
        button = new JButton("Energy");
        if (panelIndex == (numRacks * 2 + 2)) {
            button.setEnabled(false);
        }
        buttonsAdded++;
        button.setFont(font.deriveFont(Font.BOLD, 17));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonClick();
            }
        });
        panel.add(button, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx += 1;
        c.gridy = 0;
        c.gridwidth = 5;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Map Label
        label = new JLabel("Map");
        label.setFont(font.deriveFont(Font.BOLD, 20));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);
        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);

        return panel;

    }

    /**
     * Gets the number of tabs being displayed
     *
     * @return number of tabs
     */
    public int getTabCount() {
        return _TabbedPane_Tabs.getTabCount();
    }

    /**
     * Changes the selected index of the tabbed pane
     *
     * @param index int index to switch to 0 - (tab count - 1)
     */
    public void changeTab(int index) {
        _TabbedPane_Tabs.setSelectedIndex(index);
    }

    /**
     * Gets the current tab selection of the tabbed pane
     *
     * @return int index of the selected index
     */
    public int getTabSelection() {
        return _TabbedPane_Tabs.getSelectedIndex();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane _TabbedPane_Tabs;
    // End of variables declaration//GEN-END:variables
}
