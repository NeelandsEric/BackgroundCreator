/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Creator;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.DefaultListModel;

/**
 *
 * @author EricGummerson
 */
public class ChooseParadoxLinksFrame extends javax.swing.JFrame {

    
    private ParadoxLinker pl;
    private TaskManagerPanel tmp;
    
    private ParadoxKeyMap paradoxKeyMap;
    
    /**
     * Creates new form ChooseParadoxLinksFrame
     */
    public ChooseParadoxLinksFrame(ControlSettings cs, Map<String, List> nameMappings, ParadoxKeyMap paradoxKeyMap, TaskManagerPanel tmp) {
        
        this.tmp = tmp;
        initComponents();
        pl = new ParadoxLinker(cs, nameMappings);
        this.paradoxKeyMap = paradoxKeyMap;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        knownIONames = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ioNameList = new javax.swing.JList();
        knownIONames1 = new javax.swing.JLabel();
        editParadoxLink = new javax.swing.JButton();
        editTextField = new javax.swing.JTextField();
        knownIONames2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        possibleNamesList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        currentLinksList = new javax.swing.JList();
        knownIONames3 = new javax.swing.JLabel();
        knownIONames4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        possibleParadoxList = new javax.swing.JList();
        editParadoxLink1 = new javax.swing.JButton();
        deleteParadoxLink = new javax.swing.JButton();
        saveNClose = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Paradox Linker");
        setAlwaysOnTop(true);
        setResizable(false);

        knownIONames.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        knownIONames.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        knownIONames.setText("Known IO Names");

        ioNameList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ioNameList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "None" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ioNameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ioNameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ioNameListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ioNameList);

        knownIONames1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        knownIONames1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        knownIONames1.setText("Paradox Link");

        editParadoxLink.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        editParadoxLink.setText("Edit");

        editTextField.setEditable(false);
        editTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        knownIONames2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        knownIONames2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        knownIONames2.setText("IO Keys for ");

        possibleNamesList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        possibleNamesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "None" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        possibleNamesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(possibleNamesList);

        currentLinksList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        currentLinksList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "None" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentLinksList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        currentLinksList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                currentLinksListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(currentLinksList);

        knownIONames3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        knownIONames3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        knownIONames3.setText("Current Links");

        knownIONames4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        knownIONames4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        knownIONames4.setText("Paradox Keys Found");

        possibleParadoxList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        possibleParadoxList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "None" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        possibleParadoxList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(possibleParadoxList);

        editParadoxLink1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        editParadoxLink1.setText("Add Link");

        deleteParadoxLink.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        deleteParadoxLink.setText("Delete Link");

        saveNClose.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        saveNClose.setText("Save & Close");
        saveNClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(knownIONames, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3)
                    .addComponent(knownIONames2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(knownIONames1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editParadoxLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editTextField)
                    .addComponent(knownIONames4, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jScrollPane5)
                    .addComponent(editParadoxLink1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(deleteParadoxLink, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveNClose, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4)
                    .addComponent(knownIONames3, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(knownIONames3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteParadoxLink, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveNClose, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(knownIONames, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(knownIONames1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(knownIONames2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(editTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editParadoxLink, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(knownIONames4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editParadoxLink1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ioNameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ioNameListValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) {
            
            // Load Paradox Link
            loadParadoxLink();
            
            
            // Load Io Names Following
            loadIONames();
            
            
        }
    }//GEN-LAST:event_ioNameListValueChanged

    private void currentLinksListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_currentLinksListValueChanged
        // TODO add your handling code here:
        if(!evt.getValueIsAdjusting()){
            if(currentLinksList.isSelectionEmpty()){
                deleteParadoxLink.setEnabled(false);
            }else {
                deleteParadoxLink.setEnabled(true);
            }
        }
    }//GEN-LAST:event_currentLinksListValueChanged

    private void saveNCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveNCloseActionPerformed
        // TODO add your handling code here:
        tmp.returnParadoxLinks(null);
    }//GEN-LAST:event_saveNCloseActionPerformed

    
    
    private void loadParadoxLink(){
        
        if(!ioNameList.isSelectionEmpty()){
            String io = ioNameList.getSelectedValue().toString();
            
            ArrayList<String> relatedIos = (ArrayList) pl.getNameMappingsFor(io);
            
            DefaultListModel dm = new DefaultListModel();
            for(String item: relatedIos){
                dm.addElement(item);                
            }
            
            possibleNamesList.setModel(dm);
            
        }
        
        
        
        
        
    }
    
    private void loadIONames(){
        
        if(!ioNameList.isSelectionEmpty()){
            String io = ioNameList.getSelectedValue().toString();
            
            ArrayList<String> relatedIos = (ArrayList) pl.getNameMappingsFor(io);
            
            DefaultListModel dm = new DefaultListModel();
            for(String item: relatedIos){
                dm.addElement(item);                
            }
            
            possibleNamesList.setModel(dm);
            
        }
        
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList currentLinksList;
    private javax.swing.JButton deleteParadoxLink;
    private javax.swing.JButton editParadoxLink;
    private javax.swing.JButton editParadoxLink1;
    private javax.swing.JTextField editTextField;
    private javax.swing.JList ioNameList;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel knownIONames;
    private javax.swing.JLabel knownIONames1;
    private javax.swing.JLabel knownIONames2;
    private javax.swing.JLabel knownIONames3;
    private javax.swing.JLabel knownIONames4;
    private javax.swing.JList possibleNamesList;
    private javax.swing.JList possibleParadoxList;
    private javax.swing.JButton saveNClose;
    // End of variables declaration//GEN-END:variables
}
