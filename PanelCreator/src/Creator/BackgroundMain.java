package Creator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.IllegalComponentStateException;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 * Creates the main background which is the first page of the of the stores
 * Contains information all all compressors, systems, condensers, suction groups
 * price points, electricity usage and previous history numbers.
 *
 * @author EricGummerson
 */
public class BackgroundMain extends javax.swing.JPanel implements Background {

    public DisplayFrame df;
    public int numRacks;            // number of racks
    public ArrayList<Rack> racks;   // list of racks
    public Font font;               // global fonts
    public Border border;           // global border
    public String img;              // global string of the logo file path
    public String storeName;        // store name
    private Map<String, Component> widgetComponents;

    /**
     * Creates new form BackgroundMain
     *
     * @param df
     */
    public BackgroundMain(DisplayFrame df) {
        initComponents();
        this.df = df;
        this.img = "";
        this.widgetComponents = new TreeMap<>();
    }

    /**
     * Updates the form with the right information
     *
     * @param racks rack list
     * @param numRacks number of racks to read from the list
     * @param font global font
     * @param border global border
     * @param img global img string for the logo
     * @param storeName global string for the store name
     */
    @Override
    public void updateRacks(ArrayList<Rack> racks, int numRacks, Font font, Border border, String img, String storeName) {
        this.racks = racks;
        this.numRacks = numRacks;
        this.font = font;
        this.border = border;
        this.img = img;
        this.storeName = storeName;
        this.widgetComponents = new TreeMap<>();
        this.updateView();
    }

    public void updateDisplaySettings(DisplaySettings ds) {
        this.border = ds.getBorder();
        this.font = ds.getFont();
    }

    /**
     * updates the storename
     *
     * @param storeName string of the store name
     */
    @Override
    public void updateStoreName(String storeName) {
        this.storeName = storeName;
        this.updateView();
    }

    /**
     * updates the image url for the logo
     *
     * @param img string file path of the logo
     */
    @Override
    public void updateImageURL(String img) {
        this.img = img;
        this.updateView();
    }

    /**
     * updates the font selected from the settings panel
     *
     * @param font Font
     */
    @Override
    public void updateFont(Font font) {
        this.font = font;
        this.updateView();
    }

    /**
     * Updates the border
     *
     * @param border Border
     */
    @Override
    public void updateBorder(Border border) {
        this.border = border;
        this.updateView();
    }

    /**
     * Updates the font and bother
     *
     * @param font Font
     * @param border Border
     */
    @Override
    public void updateFontBorder(Font font, Border border) {
        this.font = font;
        this.border = border;
        this.updateView();
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _Panel_MainPanel = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(1800, 1200));
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName(""); // NOI18N
        setOpaque(false);

        _Panel_MainPanel.setBackground(new java.awt.Color(0, 0, 0));
        _Panel_MainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _Panel_MainPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout _Panel_MainPanelLayout = new javax.swing.GroupLayout(_Panel_MainPanel);
        _Panel_MainPanel.setLayout(_Panel_MainPanelLayout);
        _Panel_MainPanelLayout.setHorizontalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        _Panel_MainPanelLayout.setVerticalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void _Panel_MainPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__Panel_MainPanelMousePressed
        df.returnClick(evt.getPoint());
    }//GEN-LAST:event__Panel_MainPanelMousePressed
  
    /**
     * update the panel
     */
    @Override
    public void updateView() {

        // Vars used        
        int[] rackGridWidth = new int[this.numRacks];
        int sum = 2;
        for (int i = 0; i < this.numRacks; i++) {
            rackGridWidth[i] = 3 * racks.get(i).numSuctionGroups;
            sum += rackGridWidth[i];
        }

        int gridXPos, gridYPos, gridWidth, gridHeight;
        Rack r;
        SuctionGroup sg;
        JLabel label;
        JPanel panel;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        _Panel_MainPanel.setLayout(gbl);
        _Panel_MainPanel.removeAll();
        widgetComponents.clear();

        // Store panel info at top
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos = 0;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = sum;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //===========================================================  
        panel = panelTop(img, storeName);
        _Panel_MainPanel.add(panel, c);

        //===========================================================
        GridBagLayout gblRack = new GridBagLayout();
        GridBagConstraints c4 = new GridBagConstraints();
        //===========================================================            
        // Constraints         for c2
        c4.fill = GridBagConstraints.BOTH;
        c4.weightx = 1;
        c4.weighty = 1; // No space between bottom and below row?        
        c4.gridx = 0;
        c4.gridy = 0;
        c4.gridwidth = 2;
        c4.gridheight = 2; // 2 spots per row
        c4.ipady = 10;
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        panel = new JPanel();
        panel.setLayout(gblRack);

        // First initial cell
        label = new JLabel(" "); //Outside Air Temp
        label.setFont(font);
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c4);
        c4.ipady = 0;
        //panel.setBorder(border);
        //=========================================
        // Go down 2 rows
        c4.gridy += 2;
        c4.gridheight = 1;
        c4.weighty = 0;
        //=========================================
        // Rack status
        label = new JLabel("Performance");
        label.setOpaque(true);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBackground(Colours.GreenDark.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        //label.setBorder(border);
        panel.add(label, c4);
        //=========================================
        // Go down 2 rows
        //c4.ipady = 30;
        c4.gridy += 1;
        c4.weighty = 1;
        //=========================================
        label = new JLabel("Predicted  ");
        label.setOpaque(true);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBackground(Colours.GreenLightest.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        //label.setBorder(border);
        panel.add(label, c4);
        //=========================================
        // Go down 2 rows
        c4.gridy += 1;

        //=========================================
        label = new JLabel("Actual");
        label.setOpaque(true);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBackground(Colours.GreenLight.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        //label.setBorder(border);
        panel.add(label, c4);
        panel.setBorder(border);
        //=========================================        
        _Panel_MainPanel.add(panel, c);

        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos = 5;
        gridWidth = 2;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;        
        // Setup next position
        gridXPos += gridWidth;
        //gridYPos += gridHeight;

        // End of Constraints
        //panel.setBorder(border);
        //===========================================================        
        _Panel_MainPanel.add(panel, c);

        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i < this.numRacks; i++) {

            r = racks.get(i);
            // Number of suction groups for the rack          

            panel = panelRackName(r.getName());
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups
            //rackGridWidth[i] = 3 * r.numSuctionGroups; // 1 cell per compressor
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            //c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            //c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        //===========================
        // RACKS STATUS Condenser Fans
        //===========================
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = 2;
        gridHeight = 10;
        // Constraints        
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight * 2;
        c.ipady = 0;
        //c.ipady = 0;        
        // Setup next position
        gridXPos += gridWidth;
        //gridYPos += gridHeight;
        // End of Constraints
        //=========================================================== 

        //===========================================================
        // Rack status
        panel = new JPanel();
        label = new JLabel("<html>Rack Status<br><br><br> Systems</html>");
        label.setHorizontalAlignment(JLabel.CENTER);
        //label.setVerticalAlignment(JLabel.TOP);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        //label.setOpaque(true);
        //label.setBackground(Colours.GreyDark.getCol());
        //label.setBorder(border);        
        panel.add(label);
        panel.setBorder(border);
        panel.setBackground(Colours.BlueDark.getCol());
        _Panel_MainPanel.add(panel, c);
        //===========================================================            

        // Add condensers
        for (int i = 0; i < this.numRacks; i++) {
            r = racks.get(i);
            // Number of suction groups for the rack
            //===========================
            // RACK CONDENSER
            //===========================
            panel = panelCompCond(r.getName());

            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            c.gridheight = gridHeight;
            c.ipady = 0;
            // We dont setup next position because we are adding suction groups still
            //gridXPos += rackGridWidth[i];
            //gridYPos += gridHeight;
            // End of Constraints

            //===========================================================
            //panel.setBackground(Colours.GreyLight.getCol());
            _Panel_MainPanel.add(panel, c);

            // Suction Groups - Compressors then Systems   
            for (int j = 0; j < r.numSuctionGroups; j++) {

                sg = r.getSuctionGroupIndex(j);

                //===========================================================
                c.weightx = 1;
                c.weighty = 1; // No space between bottom and below row?        
                c.gridx = gridXPos;
                c.gridy = gridYPos + gridHeight;
                c.gridwidth = 3;

                // We dont setup next position because we are adding suction groups still
                //gridYPos += gridHeight;
                // End of Constraints
                //===========================================================
                // System
                panel = panelSystems(i, j, r.getNumSuctionGroups());
                //===========================================================   
                //gridYPos += gridHeight;
                // End of Constraints
                //===========================================================
                //panel.setBackground(Colours.BrownDark.getCol());
                //panel.setBorder(border);
                _Panel_MainPanel.add(panel, c);
                gridXPos += 3;
            }
        }

        // -------------------------------------------------------------------
        // ---------------     Alarms or Glycol     --------------------------
        // -------------------------------------------------------------------
        boolean glycolStore = df.mf.store.cs.glycolStore;
        // Performance constraints
        // Constraints     
        gridYPos += (gridHeight * 2);
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = 0;
        c.gridy = gridYPos; // Set new position based off previous component
        gridHeight = 10; // 5 per row for performance
        c.gridwidth = 2;
        c.gridheight = gridHeight;
        c.fill = GridBagConstraints.BOTH;
        panel = new JPanel(new GridBagLayout());
        GridBagConstraints c6 = new GridBagConstraints();
        c6.gridx = 0;
        c6.fill = GridBagConstraints.BOTH;
        if (glycolStore) {
            label = new JLabel("Glycol");
        } else {
            label = new JLabel("Alarms");
        }
        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.setOpaque(true);
        panel.setBorder(border);
        panel.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c6);
        _Panel_MainPanel.add(panel, c);
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still
        gridXPos = 2;

        //gridYPos += gridHeight;
        c.gridx = gridXPos;
        c.gridwidth = sum;
        c.ipady = 0;
        c.weighty = 1;
        panel = panelRackOutput(glycolStore);
        panel.setBorder(border);
        _Panel_MainPanel.add(panel, c);

        c.ipady = 0;

        // make labels white
        setLabels(_Panel_MainPanel, Colours.White.getCol());
        // do it before last panel

        // Bottom Panel
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 0;
        c.gridx = gridXPos;
        c.gridy = gridYPos + gridHeight;

        c.gridwidth = sum;
        c.gridheight = 1;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        panel = df.panelBottom(0);
        _Panel_MainPanel.add(panel, c);

        _Panel_MainPanel.revalidate();
        _Panel_MainPanel.repaint();

    }

    /**
     * Gets the widget positions of the current panel These positions are stored
     * in the widgetComponents map which contains the component and a string
     * identifying the component
     *
     * @return Map<String, Rectangle> Key, Rectangle of the spot
     */
    public Map<String, Rectangle> positions() {
        //public void positions() {
        //System.out.println("Positions " + rack.getName());
        Map<String, Rectangle> ioPoints = new TreeMap<>();

        if (widgetComponents.isEmpty()) {
            return null;
        }
        for (Map.Entry<String, Component> entry : widgetComponents.entrySet()) {

            Component p = entry.getValue();
            try {
                //System.out.println("Tooltip: " + ((JLabel) p).getToolTipText());
                if (p instanceof JLabel) {
                    //if (((JLabel) p).getToolTipText() != null) {
                    //System.out.println("Has a tooltip:" + ((JLabel) p).getToolTipText());
                    Rectangle r = p.getBounds();
                    Component par = p;
                    while (par.getParent() != _Panel_MainPanel) {
                        par = par.getParent();
                    }
                    r = SwingUtilities.convertRectangle(par, r, _Panel_MainPanel);
                    //((JLabel) p).setText("x=" + r.getX() + ", y=" + r.getY());

                    Rectangle oldRect = ioPoints.put(entry.getKey(), r);
                    if (oldRect != null) {
                        System.out.println("Replaced " + ((JLabel) p).getToolTipText()
                                + ".\nOld rectangle " + oldRect.toString()
                                + "\nNew rectangle: " + r.toString());
                    }

                }

            } catch (NullPointerException | IllegalComponentStateException e) {
                System.out.println("Error with " + ((JLabel) p).getName());
            }

        }

        return ioPoints;

    }

    /**
     * sets all the labels to a certain color
     *
     * @param p1 container
     * @param c colour
     */
    @Override
    public void setLabels(Container p1, Color c) {

        for (Component p : p1.getComponents()) {
            if (p instanceof JLabel) {
                ((JLabel) p).setForeground(Color.white);
            } else {
                if (p instanceof JPanel) {
                    setLabels((Container) p, c);
                }
            }
        }

    }

    /**
     * The rack names at the top
     *
     * @param rackName String of name
     * @return JPanel
     */
    public JPanel panelRackName(String rackName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        // Return a panel containing two labels
        JPanel panel = new JPanel(gbl);
        //===========================
        // RACK NAMES
        //===========================

        label = new JLabel(rackName + "        ");
        label.setFont(font.deriveFont(Font.BOLD, 18));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 0;
        c.gridwidth = c.gridheight = 2;
        c.ipady = 16;
        //c.ipady = 100;
        //c.gridheight = 5;
        //label.setOpaque(true);
        //label.setBackground(new java.awt.Color((int) (Math.random() * 256), (int) (Math.random() * 256), (int) (Math.random() * 256)));          
        
        panel.add(label, c);

        // Cost
        label = new JLabel("Cost $/hour");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        //label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.weightx = 0;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridheight = 1;
        c.gridy = 2;
        c.ipady = 0;
        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.add(label, c);

        // rack SEI
        String[] tooltip = new String[]{"Rack SEI `%rackname`", "Modal SEI `%rackname`"};
        label = new JLabel("SEI");
        label.setFont(font.deriveFont(Font.BOLD, 18));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.weighty = 1;
        c.gridx = 1;
        c.gridwidth = 3;
        c.gridy = 0;
        c.gridheight = 3;
        widgetComponents.put(tooltip[0].replace("`%rackname`", rackName), label);
        widgetComponents.put(tooltip[1].replace("`%rackname`", rackName), label);
        panel.add(label, c);

        //------------------------------
        // Performance predicted/actual spots
        tooltip = new String[]{"Performance Cost Sum Predicted `%rackname`", "Performance Cost Sum Actual `%rackname`"};

        c.weighty = 1;
        for (int i = 3; i <= 4; i++) {

            label = new JLabel();
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            c.fill = GridBagConstraints.BOTH;
            //label.setBorder(border);
            c.gridx = 0;
            c.gridwidth = 1;
            c.gridy = i;
            c.gridheight = 1;
            label.setOpaque(true);

            // green
            switch (i) {
                case 3:
                    label.setBackground(Colours.GreenLightest.getCol());
                    break;
                case 4:
                    label.setBackground(Colours.GreenLight.getCol());
                    break;
            }

            c.ipady = 30;
            widgetComponents.put(tooltip[i - 3].replace("`%rackname`", rackName), label);
            panel.add(label, c);
        }

        //-------------------
        panel.setBorder(border);
        panel.setBackground(Colours.BlueDark.getCol());
        return panel;
    }

    public JPanel panelRackOutput(boolean glycol) {

        if (!glycol) {
            JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
            JLabel label = new JLabel();            
            panel.add(label);
            panel.setBackground(Colours.BlueLightest.getCol());
            return panel;
        } else {

            // Make a panel for the glycol systems
            JLabel label;
            GridBagLayout gbl = new GridBagLayout();
            GridBagConstraints c = new GridBagConstraints();
            // Return a panel containing condenser labels
            JPanel panel = new JPanel(gbl);
            GlycolSettings gs = df.mf.store.cs.getGlycolSettings();
            int numGSys = gs.getNumGlycolSystems();
            int numCols = (int) Math.ceil(numGSys / 3.0);
            int numPerCol = 3;
            int numAdded = 0;

            //===========================
            // RACK SUCTION GROUP NAME
            //===========================
            label = new JLabel("Glycol System Status");
            c.gridwidth = numCols + 1;
            c.weightx = 1;
            c.weighty = 0;
            c.gridx = 0;
            c.gridy = 0;
            label.setFont(font.deriveFont(Font.BOLD, 18));
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);
            label.setBackground(Colours.BlueDark.getCol());
            panel.add(label, c);

            // Status - Pump Station & Chiller
            // Sizing up
            c.gridwidth = 1;
            c.gridheight = 1;
            c.weightx = 1;
            c.weighty = 1;

            // Pump Station
            c.gridx = 0;
            c.gridy = 1;
            label = new JLabel("Pump Station Status");
            label.setFont(font.deriveFont(Font.BOLD, 18));
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);
            label.setBackground(Colours.BlueLightest.getCol());
            widgetComponents.put("Glycol Pump Station Status", label);
            panel.add(label, c);

            // Chiller Status
            c.gridy = 2;
            label = new JLabel("Chiller Status");
            label.setFont(font.deriveFont(Font.BOLD, 18));
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);
            label.setBackground(Colours.BlueLightest.getCol());
            widgetComponents.put("Glycol Chiller Status", label);
            panel.add(label, c);

            // Blank for now
            c.gridy = 3;
            label = new JLabel("");
            label.setFont(font.deriveFont(Font.BOLD, 18));
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);
            label.setBackground(Colours.BlueLightest.getCol());
            panel.add(label, c);

            c.gridx = 1;
            c.gridy = 1;
            //c.ipady = 10;

            int colIndex = 1;
            int rowIndex = 1;
            int numSpots = numCols * (int) numPerCol;

            String tooltip = "Glycol Status `%glycolname`";
            for (int i = 1; i <= numSpots; i++) {

                if (numAdded < numPerCol) {
                    c.gridx = colIndex;
                    c.gridy = rowIndex++;
                    numAdded++;
                } else {
                    numAdded = 1;
                    colIndex++;
                    rowIndex = 1;
                    c.gridx = colIndex;
                    c.gridy = rowIndex++;
                }

                if (i <= numGSys) {
                    String text = gs.getGlycolSystemNameIndex(i - 1);
                    label = new JLabel(text);
                    label.setFont(font.deriveFont(Font.BOLD, 18));
                    widgetComponents.put(tooltip.replace("`%glycolname`", text), label);
                } else {
                    label = new JLabel();
                }

                label.setOpaque(true);
                label.setBackground(Colours.BlueLightest.getCol());

                //c.ipady = 25;
                c.fill = GridBagConstraints.BOTH;
                //label.setBorder(border);
                label.setVerticalAlignment(JLabel.TOP);
                label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                panel.add(label, c);
            }

            //panel.setBackground(Colours.LightestBlue.getCol());
            panel.setBorder(border);
            return panel;

        }
    }

    public JPanel panelCompCond(String rackName) {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);

        //===========================
        // RACK CONDENSER
        //===========================
        //label = new JLabel("Condensers");
        //label.setFont(font);
        //label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 0;
        c.ipady = 25;
        c.fill = GridBagConstraints.BOTH;
        label = new JLabel("Condenser Fans  ");
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        widgetComponents.put("Cond Rack Fault " + rackName, label);
        panel.add(label, c);

        c.gridx = 1;
        label = new JLabel("Compressors  ");
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        widgetComponents.put("Comp Rack Fault " + rackName, label);
        panel.add(label, c);
        panel.setBackground(Colours.BlueLightest.getCol());

        panel.setBorder(border);
        return panel;

    }

    /**
     * Makes the condenser panel
     *
     * @param numCond number of condensers
     * @param numSg number of suction groups
     * @return JPanel
     */
    public JPanel panelCondenser(int numCond, int numSg) {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);

        int numCols;
        if ((numSg + 5) > numCond) {
            numCols = numCond;
        } else {
            numCols = numSg + (numCond / 3);
        }

        double numPerCol = Math.ceil((double) numCond / numCols);
        //System.out.println("Ceil of " + numCond + "/" + numCols + "=" + numPerCol);

        int numAdded = 0;
        //===========================
        // RACK CONDENSER
        //===========================
        //label = new JLabel("Condensers");
        //label.setFont(font);
        //label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.HORIZONTAL;
        //c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        //c.gridy = 0;
        //c.gridheight = 1;
        //panel.add(label, c);

        int colIndex = 0;
        int rowIndex = 0;

        int numSpots = numCols * (int) numPerCol;
        for (int i = 1; i <= numSpots; i++) {
            if (numAdded < numPerCol) {
                c.gridx = colIndex;
                c.gridy = rowIndex++;
                numAdded++;
            } else {
                numAdded = 1;
                colIndex++;
                rowIndex = 0;
                c.gridx = colIndex;
                c.gridy = rowIndex++;
            }

            if (i <= numCond) {
                label = new JLabel("Fan " + i);
                label.setFont(font.deriveFont(Font.BOLD, 16));
            } else {
                label = new JLabel();
            }
            if (numAdded % 2 == 0) {
                label.setOpaque(true);
                label.setBackground(Colours.GreyLightest.getCol());
            } else {
                label.setOpaque(true);
                label.setBackground(Colours.GreyLight.getCol());
            }
            //label.setBorder(border);
            c.ipady = 25;
            c.fill = GridBagConstraints.BOTH;
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            panel.add(label, c);
        }

        //panel.setBackground(Colours.BlueLightest.getCol());
        panel.setBorder(border);
        return panel;
    }

    /**
     * Creates a panel for the compressors
     *
     * @param rackIndex the current rack, used to retrieve info from the list
     * @param sgIndex similar to the rack, but for suctiongroup list
     * @param numSg number of suction groups
     * @return JPanel
     */
    public JPanel panelCompressor(int rackIndex, int sgIndex, int numSg) {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        SuctionGroup sg = racks.get(rackIndex).getSuctionGroupIndex(sgIndex);
        int numComp = sg.getNumCompressors();
        int numCols;
        if ((numSg + 2) > numComp) {
            numCols = 1;
        } else {
            numCols = numSg + 1;
        }
        double numPerCol = Math.ceil((double) numComp / numCols);
        //System.out.println("Ceil of " + numCond + "/" + numCols + "=" + numPerCol);
        //System.out.println("Num compressors in bg: " + numComp);

        int numAdded = 0;

        //===========================
        // RACK SUCTION GROUP NAME
        //===========================
        label = new JLabel(sg.getName());
        c.gridwidth = numCols;
        c.weightx = 1;
        c.weighty = 0;
        c.gridx = 0;
        c.gridy = 0;
        label.setFont(font.deriveFont(Font.BOLD, 16));
        c.fill = GridBagConstraints.BOTH;
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setOpaque(true);
        label.setBackground(Colours.OrangeDark.getCol());
        panel.add(label, c);

        c.gridy = 1;
        c.weightx = 1;
        c.weighty = 1;
        c.gridwidth = 1;
        c.gridheight = 1;

        int colIndex = 0;
        int rowIndex = 1;
        int numSpots = numCols * (int) numPerCol;
        for (int i = 1; i <= numSpots; i++) {
            if (numAdded < numPerCol) {
                c.gridx = colIndex;
                c.gridy = rowIndex++;
                numAdded++;
            } else {
                numAdded = 1;
                colIndex++;
                rowIndex = 1;
                c.gridx = colIndex;
                c.gridy = rowIndex++;
            }

            if (i <= numComp) {
                String text = sg.getCompressorNameIndex(i - 1);
                label = new JLabel(text);
                label.setFont(font);
            } else {
                label = new JLabel();
            }

            //label.setBorder(border);
            if (numAdded % 2 == 0) {
                label.setOpaque(true);
                label.setBackground(Colours.OrangeLightest.getCol());
            } else {
                label.setOpaque(true);
                label.setBackground(Colours.OrangeLight.getCol());
            }
            c.ipady = 25;
            c.fill = GridBagConstraints.BOTH;
            label.setVerticalAlignment(JLabel.TOP);
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            panel.add(label, c);
        }

        panel.setBorder(border);
        return panel;

    }

    /**
     * Creates the panel of systems
     *
     * @param rackIndex the current rack, used to retrieve info from the list
     * @param sgIndex similar to the rack, but for suctiongroup list
     * @param numSg number of suction groups
     * @return JPanel
     */
    public JPanel panelSystems(int rackIndex, int sgIndex, int numSg) {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        SuctionGroup sg = racks.get(rackIndex).getSuctionGroupIndex(sgIndex);
        int numSys = sg.getNumSystems();
        int numCols;
        if (numSg > 3) {
            numCols = 2;
        } else if (numSys >= 4 && numSys <= 8) {
            numCols = 2;
        } else if (numSys < 16 && numSys > 8) {
            numCols = 3;
        } else if (numSys <= 4) {
            numCols = 1;
        } else {
            if (numRacks > 2) {
                numCols = 2;
            } else if (df.cs.getTotalSG() < 4) {
                numCols = 6;
            } else {
                numCols = 3;
            }
        }

        double numPerCol = Math.ceil((double) numSys / numCols);
        //System.out.println("Ceil of " + numCond + "/" + numCols + "=" + numPerCol);
        //System.out.println("Num compressors in bg: " + numComp);

        int numAdded = 0;

        //===========================
        // RACK SUCTION GROUP NAME
        //===========================
        label = new JLabel(sg.getName());
        c.gridwidth = numCols;
        c.weightx = 1;
        c.weighty = 0;
        c.gridx = 0;
        c.gridy = 0;
        label.setFont(font.deriveFont(Font.BOLD, 18));
        c.fill = GridBagConstraints.BOTH;
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);

        //c.gridy = 1;
        c.weightx = 1;
        c.weighty = 1;
        c.gridwidth = 1;
        c.gridheight = 1;
        c.ipady = 10;

        int colIndex = 0;
        int rowIndex = 1;
        int numSpots = numCols * (int) numPerCol;

        String rackName = racks.get(rackIndex).getName();
        String tooltip = "System Status `%rackname` `%sgname` `%sysname`";
        tooltip = tooltip.replace("`%rackname`", rackName).replace("`%sgname`", sg.getName());
        for (int i = 1; i <= numSpots; i++) {

            if (numAdded < numPerCol) {
                c.gridx = colIndex;
                c.gridy = rowIndex++;
                numAdded++;
            } else {
                numAdded = 1;
                colIndex++;
                rowIndex = 1;
                c.gridx = colIndex;
                c.gridy = rowIndex++;
            }

            if (i <= numSys) {
                String text = sg.getSystemNameIndex(i - 1);
                label = new JLabel(text);
                label.setFont(font.deriveFont(Font.BOLD, 18));
                widgetComponents.put(tooltip.replace("`%sysname`", text), label);
            } else {
                label = new JLabel();
            }

            label.setOpaque(true);
            label.setBackground(Colours.BlueLightest.getCol());

            //c.ipady = 25;
            c.fill = GridBagConstraints.BOTH;
            label.setVerticalAlignment(JLabel.TOP);
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            panel.add(label, c);
        }

        //panel.setBackground(Colours.LightestBlue.getCol());
        panel.setBorder(border);
        return panel;

    }

    /**
     * Creates a panel for the performance
     *
     * @return JPanel
     */
    public JPanel panelPerformance() {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Cost");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridy = 0;
        c.gridheight = 1;
        c.ipady = 0;

        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.add(label, c);
        // KW
        label = new JLabel("kW");
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;

        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.add(label, c);
        c.ipady = 10;
        c.weighty = 1;
        for (int i = 1; i <= 3; i++) {
            for (int j = 0; j < 2; j++) {
                label = new JLabel();
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
                c.fill = GridBagConstraints.BOTH;
                label.setBorder(border);
                c.gridx = j;
                c.gridy = i;
                label.setOpaque(true);
                if (j == 0) {
                    // green
                    switch (i) {
                        case 1:
                        case 3:
                            label.setBackground(Colours.GreenLight.getCol());
                            break;
                        case 2:
                            label.setBackground(Colours.GreenLightest.getCol());
                            break;
                    }
                } else {
                    switch (i) {
                        case 1:
                        case 3:
                            label.setBackground(Colours.BlueLight.getCol());
                            break;
                        case 2:
                            label.setBackground(Colours.BlueLightest.getCol());
                            break;
                    }
                }
                c.ipady = 30;
                panel.add(label, c);
            }
        }

        // Cost -> KW
        // Label | Label 
        // Label | Label
        // Label | Label
        //panel.setBorder(border);
        return panel;

    }

    /**
     * Creates the operating panel
     *
     * @return JPanel
     */
    public JPanel panelOperating() {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Current Year");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font);
        panel.add(label, c);
        // KW
        label = new JLabel("Previous Year");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        //c.weightx = 1;
        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font);
        panel.add(label, c);

        c.weighty = 1;
        for (int i = 1; i <= 3; i++) {
            for (int j = 0; j < 2; j++) {
                label = new JLabel();
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
                c.fill = GridBagConstraints.BOTH;
                label.setBorder(border);
                c.gridx = j;
                c.gridy = i;
                label.setOpaque(true);
                switch (i) {
                    case 1:
                    case 3:
                        label.setBackground(Colours.GreenLight.getCol());
                        break;
                    case 2:
                        label.setBackground(Colours.GreenLightest.getCol());
                        break;
                }
                c.ipady = 30;
                panel.add(label, c);
            }
        }

        // Cost -> KW
        // Label | Label 
        // Label | Label
        // Label | Label
        //panel.setBorder(border);
        return panel;

    }

    /**
     * Top panel
     *
     * @param imgUrl file path for the image url
     * @param storeName string store name
     * @return JPanel
     */
    public JPanel panelTop(String imgUrl, String storeName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 1;
        c.gridwidth = 10;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // store logo 
        //===========================       
        label = new JLabel();
        if (!"".equals(imgUrl)) {
            ImageIcon icon = new ImageIcon(imgUrl);
            label.setIcon(icon);
        } else {
            label.setText("NO LOGO SELECTED");
        }
        //label.setBorder(border);        
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 10;
        //c.gridy = 0;
        c.gridwidth = 20;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("");
        //label.setBorder(border);        
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 30;
        //c.gridy = 1;
        c.gridwidth = 10;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("OPERATIONAL OVERVIEW                 " + storeName);
        label.setOpaque(true);
        label.setBackground(Color.BLACK);
        label.setForeground(Colours.Gray.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 22));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setBorder(BorderFactory.createLoweredBevelBorder());
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel _Panel_MainPanel;
    // End of variables declaration//GEN-END:variables
}
