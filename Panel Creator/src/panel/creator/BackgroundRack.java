/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel.creator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 *
 * @author EricGummerson
 */
public class BackgroundRack extends javax.swing.JPanel {

    public int numRacks;
    public Rack rack;
    public Font font;
    public Border border;
    public String img;
    public String storeName;
    public int rackNum;
    public String[] rackNames;

    /**
     * Creates new form BackgroundRack
     *
     * @param rackNum
     */
    public BackgroundRack(int rackNum) {
        initComponents();
        this.rack = new Rack();
        this.img = "";
        this.rackNum = rackNum;
    }

    public void updateRackNum(int rackNum) {
        this.rackNum = rackNum;
    }

    public void updateRacks(Rack rack, int numRacks, Font font, Border border, String img, String storeName, String[] rackNames) {

        this.rack = rack;
        this.numRacks = numRacks;
        this.font = font;
        this.border = border;
        this.img = img;
        this.storeName = storeName;
        this.rackNames = rackNames;
        this.updateView();
    }

    public void updateStoreName(String storeName) {
        this.storeName = storeName;
        this.updateView();
    }

    public void updateImageURL(String img) {
        this.img = img;
        this.updateView();
    }

    public void updateFont(Font font) {
        this.font = font;
        this.updateView();
    }

    public void updateBorder(Border border) {
        this.border = border;
        this.updateView();
    }

    public void updateFontBorder(Font font, Border border) {
        this.font = font;
        this.border = border;
        this.updateView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _Panel_MainPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1000, 800));

        _Panel_MainPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout _Panel_MainPanelLayout = new javax.swing.GroupLayout(_Panel_MainPanel);
        _Panel_MainPanel.setLayout(_Panel_MainPanelLayout);
        _Panel_MainPanelLayout.setHorizontalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        _Panel_MainPanelLayout.setVerticalGroup(
            _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // remove int i to be the called function
    public void updateView() {

        int gridXPos, gridYPos, gridWidth, gridHeight;
        int maxGridWidth = 30;
        Rack r;
        SuctionGroup sg;
        JLabel label;
        JPanel panel;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        _Panel_MainPanel.setLayout(gbl);
        _Panel_MainPanel.removeAll();

        // Store panel info at top
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos = 0;
        gridWidth = maxGridWidth;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //===========================================================  
        panel = panelTop(img, storeName);
        _Panel_MainPanel.add(panel, c);

        // Pressure/temp
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = 15;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //=========================================================== 

        panel = panelPressureTemps();
        _Panel_MainPanel.add(panel, c);

        // SEI blank
        //===========================================================
        // Positioning
        gridXPos += gridWidth;
        //gridYPos = gridHeight;  
        gridWidth = 5;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //=========================================================== 
        label = new JLabel("                                              ");
        //label.setBorder(border);
        panel.add(label);

        // performance
        //===========================================================
        // Positioning
        gridXPos += gridWidth;
        //gridYPos += gridHeight;
        gridWidth = 10;
        gridHeight = 10;
        // Constraints               
        //c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //=========================================================== 

        panel = panelPerformance();
        _Panel_MainPanel.add(panel, c);
        
        //=========================================================== 
        // Filler area
        
        gridYPos += gridHeight;
        gridHeight = 10;
        c.gridx = 0;
        c.gridy = gridYPos;
        c.gridwidth = 20;   
        c.gridheight = gridHeight;    
        c.ipady = 50;
        JPanel p1 = new JPanel();
        p1.setPreferredSize(new Dimension(panel.getWidth(), 225));
        p1.setBackground(Color.black);
        //p1.setBorder(border);
        panel.add(p1, c);
        
        //=========================================================== 

        // Condenser
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = 20;
        gridHeight = 5;
        c.ipady = 0;
        // Constraints               
        //c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //=========================================================== 
        panel = panelCondenser();
        _Panel_MainPanel.add(panel, c);

        // Fan images - blanks
        //===========================================================
        // Positioning
        gridXPos += gridWidth;
        //gridYPos = gridHeight;  
        gridWidth = 2;
        gridHeight = 5;
        // Constraints               
        //c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //=========================================================== 
        label = new JLabel("");
        //label.setBorder(border);
        panel.add(label);

        _Panel_MainPanel.add(label, c);
        // Load and efficiency
        //===========================================================
        // Positioning
        gridXPos += gridWidth;
        //gridYPos = gridHeight;  
        gridWidth = 8;
        gridHeight = 10;
        // Constraints               
        //c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //=========================================================== 
        panel = panelLE();
        _Panel_MainPanel.add(panel, c);
        
        
        //=========================================================== 
        // Filler area
        gridYPos += gridHeight;
        gridHeight = 10;
        c.gridx = 0;
        c.gridy = gridYPos;
        c.gridwidth = 20;   
        c.gridheight = gridHeight;  
        c.ipady = 150;
        JPanel p = new JPanel();
        p.setPreferredSize(new Dimension(panel.getWidth(), 225));
        p.setBackground(Color.black);
        //p.setBorder(border);
        panel.add(p, c);
        
        //=========================================================== 
        
        // Compressor status
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = 15;
        gridHeight = 7;
        // Constraints               
        //c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 1; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        c.ipady = 0;
        //c.ipady = 0;                
        // End of Constraints
        //=========================================================== 
        panel = panelCompressor();
        _Panel_MainPanel.add(panel, c);

        //==============================================================
        // make labels white
        setLabels(_Panel_MainPanel, Colours.White.getCol());
        // do it before last panel

        // Bottom Panel
        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.BOTH;
        //c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = maxGridWidth;
        gridHeight = 5; // 5 per row for performance 
        c.gridx = gridXPos;
        c.gridy = gridYPos;

        c.gridwidth = gridWidth;
        c.gridheight = 1;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        panel = panelBottom(this.numRacks);
        _Panel_MainPanel.add(panel, c);

        _Panel_MainPanel.revalidate();
        _Panel_MainPanel.repaint();

    }
    
    
    
    public void addPanel(JPanel newPanel, int x, int y, int gwid, int ghei, int wx, int wy, int fill, int padx, int pady){
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = x;
        c.gridy = y;
        
    }

    public void setLabels(Container p1, Color c) {

        for (Component p : p1.getComponents()) {
            if (p instanceof JLabel) {
                ((JLabel) p).setForeground(Color.white);
            } else {
                if (p instanceof JPanel) {
                    setLabels((Container) p, c);
                }
            }
        }

    }

    public JPanel panelPressureTemps() {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        // Return a panel containing two labels
        JPanel panel = new JPanel(gbl);
        //===========================
        // RACK NAMES
        //===========================

        // ----     |       Pressure    | Subcooling    | Saturation    | Line tep
        // ----     | Setpoint  | Actual| Superheat     |               |
        //---------------------------------------------------------------------------
        // Liq      |           |       |               |               |
        // Dis      |           |       |               |               |
        // Suc SG # |           |       |               |               |
        // Suc SG # |           |       |               |               |
        // Max SG   |           |       |               |               |
        //==================================================================
        // Empty space (1 x 2)
        label = new JLabel("");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridheight = 2;
        c.ipady = 10;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Pressure (1 x 1)
        label = new JLabel("Pressure");
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font);
        label.setBorder(border);
        c.gridx = 1;
        c.gridy = 0;
        c.gridwidth = 2;
        c.gridheight = 1;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Setpoint (1 x 1)
        label = new JLabel(" Setpoint ");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 1;
        c.gridy = 1;
        c.gridwidth = 1;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Actual (1 x 1)   | Setpoint |
        label = new JLabel("   Actual   ");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 2;
        c.gridy = 1;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Subcooling/Superheat (1 x 2)
        label = new JLabel("<html> Subcooling <br> Superheat </html>");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 3;
        c.gridy = 0;
        c.gridwidth = 1;
        c.gridheight = 2;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Subcooling/Superheat (1 x 2)
        label = new JLabel(" Saturation ");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 4;
        c.gridy = 0;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Line Temp (1 x 2)
        label = new JLabel(" Line Temp ");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 5;
        c.gridy = 0;
        //c.ipady = 100;        
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        // Now add the left columns
        //==================================================================
        // Liquid (1 x 1)
        label = new JLabel(" Liquid ");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 0;
        c.gridy = 2;
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridheight = 1;
        //c.ipady = 100;        
        label.setOpaque(true);
        label.setBackground(Colours.BlueLightest.getCol());
        panel.add(label, c);
        //==================================================================
        //==================================================================
        // Blank fields
        for (int j = 0; j < 5; j++) {
            c.gridx++;
            label = new JLabel("");
            label.setFont(font);
            label.setBorder(border);
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            label.setOpaque(true);
            label.setBackground(Colours.BlueLightest.getCol());
            panel.add(label, c);
        }
        //==================================================================

        //==================================================================
        // Discharge (1 x 1)
        label = new JLabel(" Discharge ");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 0;
        c.gridy = 3;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Blank fields
        for (int j = 0; j < 5; j++) {
            c.gridx++;
            label = new JLabel("");
            label.setFont(font);
            label.setBorder(border);
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);

            label.setBackground(Colours.BlueLight.getCol());
            panel.add(label, c);
        }
        //==================================================================

        int numSg = rack.getNumSuctionGroups();

        for (int i = 0; i < numSg; i++) {
            c.gridx = 0;
            c.gridy++;
            label = new JLabel(" Suction " + rack.getSuctionGroupIndex(i).getName() + " ");
            label.setFont(font);
            label.setBorder(border);
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);
            if (i % 2 == 0) {
                label.setBackground(Colours.BlueLightest.getCol());
            } else {
                label.setBackground(Colours.BlueLight.getCol());
            }
            panel.add(label, c);

            for (int j = 0; j < 5; j++) {
                c.gridx++;
                label = new JLabel("");
                label.setFont(font);
                label.setBorder(border);
                label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                label.setOpaque(true);
                if (i % 2 == 0) {
                    label.setBackground(Colours.BlueLightest.getCol());
                } else {
                    label.setBackground(Colours.BlueLight.getCol());
                }
                panel.add(label, c);
            }

        }

        panel.setBackground(Color.black);
        return panel;
    }

    public JPanel panelCondenser() {

        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);

        
        //===========================
        // RACK CONDENSER
        //===========================
        label = new JLabel("Condenser Status");
        label.setOpaque(true);
        label.setBackground(Color.black);
        label.setFont(font);
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 0;
        c.gridheight = 1;
        c.gridwidth = 3;
        panel.add(label, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 1;
        c.gridheight = 1;
        c.gridwidth = 1;
        label = new JLabel("Fan # ");
        label.setFont(font);
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        panel.add(label, c);

        int numCond = rack.getNumCondenserFans();

        for (int i = 1; i <= numCond; i++) {

            label = new JLabel("Fan " + i + " ");
            label.setFont(font);
            label.setOpaque(true);
            label.setBackground(Colours.BlueDark.getCol());
            label.setBorder(border);

            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            c.gridx = i;
            panel.add(label, c);
        }

        label = new JLabel("Fan Amps");
        label.setFont(font);
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setBorder(border);
        c.gridy = 2;
        c.gridx = 0;
        c.ipady = 10;
        panel.add(label, c);
        label = new JLabel("Fault Detect ");
        label.setFont(font);
        label.setOpaque(true);
        label.setBackground(Colours.BlueLightest.getCol());
        label.setBorder(border);
        c.gridy = 3;
        c.gridx = 0;
        panel.add(label, c);

        c.gridy = 2;
        c.fill = GridBagConstraints.BOTH;

        for (int i = 1; i <= numCond; i++) {
            label = new JLabel("");
            c.gridx = i;
            label.setOpaque(true);
            label.setBackground(Colours.BlueLight.getCol());
            label.setBorder(border);
            panel.add(label, c);
        }

        c.gridy = 3;

        for (int i = 1; i <= numCond; i++) {
            label = new JLabel("");
            c.gridx = i;
            label.setOpaque(true);
            label.setBackground(Colours.BlueLightest.getCol());
            label.setBorder(border);
            panel.add(label, c);
        }

        panel.setBackground(Color.black);
        return panel;
    }

    public JPanel panelCompressor() {

        // Condenser Panel will list the condensers 
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JLabel label;
        JPanel panel = new JPanel(gbl);
        SuctionGroup sg;
        // Calculate the number of compressors
        int numSg = rack.getNumSuctionGroups();
        int[] comp = new int[numSg];
        for (int i = 0; i < numSg; i++) {
            comp[i] = rack.getSuctionGroupIndex(i).getNumCompressors();
        }

        // we saved the number of compressors for each suction group
        // Now we assign x number of columns for each suction group, where each
        // suction group number of compressors will be x
        //===========================
        // RACK COMPRESSOR
        // Row 1
        //===========================
        label = new JLabel("Compressor Status");
        label.setOpaque(true);
        label.setBackground(Color.black);
        label.setFont(font);
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);        
        c.gridx = 0;
        c.weightx = 0;
        c.weighty = 0;
        c.gridy = 0;
        c.gridheight = 1;
        c.gridwidth = 3;
        panel.add(label, c);

        
        // Row 2
        c.gridy = 1;
        c.weightx = 0;
        
        c.gridheight = 1;
        c.gridwidth = 2;
        c.fill = GridBagConstraints.BOTH;
        label = new JLabel("Suction Groups");
        label.setFont(font);
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueDark.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        // Row 2
        c.gridy = 2;
        label = new JLabel("Compressors");
        label.setFont(font);
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==========================================================
        //                  Suction groups + compressors
        //==========================================================
        c.gridx = 2;
        c.gridy = 1;
        c.weightx = 1;
        for (int i = 0; i < numSg; i++) {

            // Suction group
            c.gridheight = 1;
            c.gridwidth = comp[i];
            label = new JLabel(rack.getSuctionGroupNameIndex(i));
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setFont(font);
            label.setOpaque(true);
            label.setBackground(Colours.BlueDark.getCol());
            label.setBorder(border);
            panel.add(label, c);

            // now each compressor
            c.gridy += 1;
            c.gridwidth = 1;
            for (int j = 0; j < comp[i]; j++) {
                sg = rack.getSuctionGroupIndex(i);
                label = new JLabel(sg.getCompressorNameIndex(j));
                label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                label.setFont(font);
                label.setOpaque(true);
                label.setBackground(Colours.BlueDark.getCol());
                label.setBorder(border);
                panel.add(label, c);
                c.gridx += 1;

            }
            // Go back up a space for the suctiongroup title
            c.gridy -= 1;
        }

        // Add the left side titles
        //===========================
        // row 4
        // Discharge temp
        //===========================
        c.gridx = 0;
        c.gridy = 4;
        c.gridwidth = 2;
        c.weightx = 0;
        c.weighty = 1;
        label = new JLabel("Disch Temp");
        label.setFont(font);
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;
        for (int i = 0; i < numSg; i++) {
            for (int j = 0; j < comp[i]; j++) {
                label = new JLabel("");
                label.setFont(font);
                label.setOpaque(true);
                label.setBorder(border);
                label.setBackground(Colours.BlueLight.getCol());
                panel.add(label, c);
                c.gridx += 1;
            }
        }

        //===========================
        // row 5
        // Discharge temp
        //===========================
        c.gridx = 0;
        c.gridy = 5;
        c.gridwidth = 2;
        c.weightx = 0;
        label = new JLabel("Amps");
        label.setFont(font);
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLightest.getCol());
        panel.add(label, c);

        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;
        for (int i = 0; i < numSg; i++) {
            for (int j = 0; j < comp[i]; j++) {
                label = new JLabel("");
                label.setFont(font);
                label.setOpaque(true);
                label.setBorder(border);
                label.setBackground(Colours.BlueLightest.getCol());
                panel.add(label, c);
                c.gridx += 1;
            }
        }
        //===========================
        // row 6
        // Discharge temp
        //===========================
        c.gridx = 0;
        c.gridy = 6;
        c.gridwidth = 2;
        c.weightx = 0;
        label = new JLabel("KWH Today");
        label.setFont(font);
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);

        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;
        for (int i = 0; i < numSg; i++) {
            for (int j = 0; j < comp[i]; j++) {
                label = new JLabel("");
                label.setFont(font);
                label.setOpaque(true);
                label.setBorder(border);
                label.setBackground(Colours.BlueLight.getCol());
                panel.add(label, c);
                c.gridx += 1;
            }
        }
        //===========================
        // row 7
        // Discharge temp
        //===========================
        c.gridx = 0;
        c.gridy = 7;
        c.gridwidth = 2;
        c.weightx = 0;        
        label = new JLabel("Fault Detect");
        label.setFont(font);
        label.setOpaque(true);
        label.setBorder(border);
        label.setBackground(Colours.BlueLightest.getCol());
        panel.add(label, c);

        //===========================
        // Add columns
        //===========================
        c.gridx += 2;
        c.gridwidth = 1;
        c.weightx = 1;        
        for (int i = 0; i < numSg; i++) {
            for (int j = 0; j < comp[i]; j++) {
                label = new JLabel("");
                label.setFont(font);
                label.setOpaque(true);
                label.setBorder(border);
                label.setBackground(Colours.BlueLightest.getCol());
                panel.add(label, c);
                c.gridx += 1;
            }
        }

        //==================================================================
        panel.setBackground(Color.black);
        return panel;
    }

   
    public JPanel panelLE() {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Load and Efficiency");
        label.setOpaque(true);
        label.setBackground(Color.black);
        //label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridwidth = 2;
        c.gridheight = 1;
        c.ipady = 20;

        label.setFont(font);
        panel.add(label, c);

        // Titles
        // first title
        label = new JLabel(" Cooling Load ");
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 1;
        c.weightx = 0;
        c.gridwidth = 1;
        label.setFont(font);
        panel.add(label, c);

        // empty tab
        label = new JLabel();
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.gridx = 1;
        c.ipadx = 10;
        label.setFont(font);
        panel.add(label, c);

        // second title
        label = new JLabel("COP");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 2;
        c.weightx = 0;
        c.gridwidth = 1;
        c.ipadx = 0;
        label.setFont(font);
        panel.add(label, c);

        // empty tab
        label = new JLabel();
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        c.weightx = 1;
        c.ipadx = 10;
        label.setFont(font);
        panel.add(label, c);

        return panel;

    }

    public JPanel panelPerformance() {
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        // Return a panel containing two labels
        JPanel panel = new JPanel(gbl);
        //===========================
        // RACK NAMES
        //===========================

        // Empty space (1 x 2)
        label = new JLabel("<html>Performance<br>Status</html>");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridheight = 2;
        c.ipady = 10;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Pressure (1 x 1)
        label = new JLabel("Measured");
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font);
        label.setBorder(border);
        c.gridx = 1;
        c.gridy = 0;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Subcooling/Superheat (1 x 2)
        label = new JLabel("   + / -   ");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 2;
        c.gridy = 0;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        // Now add the left columns
        //==================================================================
        // Liquid (1 x 1)
        label = new JLabel("$/ton");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 0;
        c.gridy = 2;
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.gridheight = 1;
        //c.ipady = 100;        
        label.setOpaque(true);
        label.setBackground(Colours.GreenLight.getCol());
        panel.add(label, c);
        //==================================================================
        //==================================================================
        // Blank fields
        for (int j = 0; j < 2; j++) {
            c.gridx++;
            label = new JLabel("");

            label.setFont(font);
            label.setBorder(border);
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);
            label.setBackground(Colours.GreenLight.getCol());
            panel.add(label, c);
        }
        //==================================================================

        //==================================================================
        // current kw (1 x 1)
        label = new JLabel("Current KW");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 0;
        c.gridy = 3;
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Blank fields
        for (int j = 0; j < 2; j++) {
            c.gridx++;
            label = new JLabel("");
            label.setFont(font);
            label.setBorder(border);
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setOpaque(true);

            label.setBackground(Colours.BlueDark.getCol());
            panel.add(label, c);
        }
        //==================================================================

        //==================================================================
        // todays kwh (1 x 1)
        label = new JLabel("<html>Todays<br>KWH</html>");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 0;
        c.gridy = 4;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Blank fields
        for (int j = 0; j < 2; j++) {
            c.gridx++;
            label = new JLabel("");
            label.setFont(font);
            label.setBorder(border);
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            label.setOpaque(true);

            label.setBackground(Colours.BlueLight.getCol());
            panel.add(label, c);
        }
        //==================================================================

        //==================================================================
        // todays kwh (1 x 1)
        label = new JLabel("<html>Current<br>Month KWH</html>");
        label.setFont(font);
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.gridx = 0;
        c.gridy = 5;
        label.setOpaque(true);
        label.setBackground(Colours.BlueLightest.getCol());
        panel.add(label, c);
        //==================================================================

        //==================================================================
        // Blank fields
        for (int j = 0; j < 2; j++) {
            c.gridx++;
            label = new JLabel("");
            label.setFont(font);
            label.setBorder(border);
            label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
            label.setOpaque(true);

            label.setBackground(Colours.BlueLightest.getCol());
            panel.add(label, c);
        }
        //==================================================================

        panel.setBackground(Color.black);
        return panel;

    }

    public JPanel panelBottom(int numRacks) {

        JButton button;
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 0;
        c.gridwidth = 5;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // Powered by label
        //===========================
        label = new JLabel("Powered by N.O.E.L");
        label.setForeground(Colours.White.getCol());
        //label.setBorder(border);
        label.setFont(new Font("Arial", Font.BOLD, 14));
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        panel.add(label, c);
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 5;
        //c.gridy = 0;
        c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        //==========================================================
        //                  Buttons
        //==========================================================
        // Main button
        //button = new JButton("<html><font color = green>Main</font></html>");        
        button = new JButton("Main");
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        panel.add(button, c);
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        //c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 6;
        //c.gridy = 0;
        //c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        // Rack buttons
        for (int i = 0; i < numRacks; i++) {
            c.gridx += 1;
            button = new JButton(rackNames[i]);
            button.setFont(new Font("Arial", Font.BOLD, 14));
            button.setAlignmentX((Component.CENTER_ALIGNMENT));

            if (rackNum == i) {
                button.setEnabled(false);
            }
            panel.add(button, c);
        }

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        //c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx += 1;
        //c.gridy = 0;
        //c.gridwidth = 1;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        // Load Button
        button = new JButton("Loads");
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setAlignmentX((Component.CENTER_ALIGNMENT));
        panel.add(button, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx += 1;
        //c.gridy = 0;
        c.gridwidth = 5;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Map Label
        label = new JLabel("Map");
        label.setFont(new Font("Arial", Font.BOLD, 14));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    public JPanel panelTop(String imgUrl, String storeName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 1;
        c.gridwidth = 10;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // store logo 
        //===========================       
        label = new JLabel();
        if (!"".equals(imgUrl)) {
            ImageIcon icon = new ImageIcon(imgUrl);
            label.setIcon(icon);
        } else {
            label.setText("NO LOGO SELECTED");
        }
        //label.setBorder(border);        
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 10;
        //c.gridy = 0;
        c.gridwidth = 20;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("");
        //label.setBorder(border);        
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 30;
        //c.gridy = 1;
        c.gridwidth = 10;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel(rack.getName() + "                 " + storeName);
        label.setOpaque(true);
        label.setBackground(Color.BLACK);
        label.setFont(new Font("Arial", Font.BOLD, 18));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setBorder(BorderFactory.createRaisedBevelBorder());
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel _Panel_MainPanel;
    // End of variables declaration//GEN-END:variables
}
