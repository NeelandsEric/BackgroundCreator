package Creator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.IllegalComponentStateException;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 * Creates the main background which is the first page of the of the stores
 * Contains information all all compressors, systems, condensers, suction groups
 * price points, electricity usage and previous history numbers
 *
 * @author EricGummerson
 */
public class BackgroundEnergy extends javax.swing.JPanel {

    public DisplayFrame df;
    public int numRacks;            // number of racks
    public ArrayList<Rack> racks;   // list of racks
    public Font font;               // global fonts
    public Border border;           // global border
    public String img;              // global string of the logo file path
    public String storeName;        // store name
    private Map<String, Component> widgetComponents;

    /**
     * Creates new form BackgroundMain
     *
     * @param df
     */
    public BackgroundEnergy(DisplayFrame df) {
        initComponents();
        this.df = df;
        this.img = "";        
        this.storeName = "Store Name";
        this.widgetComponents = new TreeMap<>();
    }

    /**
     * Updates the form with the right information
     *
     * @param racks rack list
     * @param numRacks number of racks to read from the list
     * @param font global font
     * @param border global border
     * @param img global img string for the logo
     * @param storeName global string for the store name
     */
    public void updateRacks(ArrayList<Rack> racks, int numRacks, Font font, Border border, String img, String storeName) {
        this.racks = racks;
        this.numRacks = numRacks;
        this.font = font;
        this.border = border;
        this.img = img;
        this.storeName = storeName;
        this.widgetComponents = new TreeMap<>();
        this.updateView();
    }

    public void updateDisplaySettings(DisplaySettings ds) {
        this.border = ds.getBorder();
        this.font = ds.getFont();
    }

    /**
     * updates the storename
     *
     * @param storeName string of the store name
     */
    public void updateStoreName(String storeName) {
        this.storeName = storeName;
        this.updateView();
    }

    /**
     * updates the image url for the logo
     *
     * @param img string file path of the logo
     */
    public void updateImageURL(String img) {
        this.img = img;
        this.updateView();
    }

    /**
     * updates the font selected from the settings panel
     *
     * @param font Font
     */
    public void updateFont(Font font) {
        this.font = font;
        this.updateView();
    }

    /**
     * Updates the border
     *
     * @param border Border
     */
    public void updateBorder(Border border) {
        this.border = border;
        this.updateView();
    }

    /**
     * Updates the font and bother
     *
     * @param font Font
     * @param border Border
     */
    public void updateFontBorder(Font font, Border border) {
        this.font = font;
        this.border = border;
        this.updateView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        _Panel_MainPanel = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(1800, 1200));
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName(""); // NOI18N
        setOpaque(false);

        _Panel_MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        _Panel_MainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _Panel_MainPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout _Panel_MainPanelLayout = new javax.swing.GroupLayout(_Panel_MainPanel);
        _Panel_MainPanel.setLayout(_Panel_MainPanelLayout);
        _Panel_MainPanelLayout.setHorizontalGroup(
                _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 1000, Short.MAX_VALUE)
        );
        _Panel_MainPanelLayout.setVerticalGroup(
                _Panel_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(_Panel_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    /**
     * Sends the clicked point to the display frame to send back to the main
     *
     * @param evt mouse event
     */
    private void _Panel_MainPanelMousePressed(java.awt.event.MouseEvent evt) {
        df.returnClick(evt.getPoint());
    }

    /**
     * update the panel
     */
    public void updateView() {

        // Vars used        
        int[] rackGridWidth = new int[this.numRacks + 1];
        int sum = 5;
        rackGridWidth[0] = 3;
        for (int i = 0; i < this.numRacks; i++) {
            rackGridWidth[i + 1] = 3 * racks.get(i).numSuctionGroups;
            sum += rackGridWidth[i + 1];
        }

        int gridXPos, gridYPos, gridWidth, gridHeight;
        Rack r;
        JLabel label;
        JPanel panel;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        _Panel_MainPanel.setLayout(gbl);
        _Panel_MainPanel.removeAll();
        widgetComponents.clear();

        // Store panel info at top
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos = 0;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = sum;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //===========================================================  
        panel = panelTop(img, storeName);
        _Panel_MainPanel.add(panel, c);

        // Site info
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos += gridHeight;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = sum;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                
        // End of Constraints
        //===========================================================  
        panel = panelSiteInfo(storeName);
        panel.setBorder(border);
        _Panel_MainPanel.add(panel, c);

        // First initial cell
        label = new JLabel(""); //Outside Air Temp
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 18));
        panel = new JPanel();
        panel.add(label);
        panel.setBackground(Colours.BlueDark.getCol());
        panel.setBorder(border);
        //===========================================================
        // Positioning
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = 2;
        gridHeight = 5;
        // Constraints               
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;        
        // Setup next position
        gridXPos += gridWidth;
        //gridYPos += gridHeight;

        // End of Constraints
        //===========================================================        
        _Panel_MainPanel.add(panel, c);

        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i <= this.numRacks; i++) {

            if (i == 0) {
                panel = panelRackName("Total");
            } else {
                r = racks.get(i - 1);
                // Number of suction groups for the rack 
                panel = panelRackName(r.getName());
            }
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups
            //rackGridWidth[i] = 3 * r.numSuctionGroups; // 1 cell per compressor
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            //c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            //c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        //===========================
        // Performance
        //===========================
        //===========================================================            
        // Constraints     
        gridYPos += (gridHeight * 2);
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = 0;
        c.gridy = gridYPos; // Set new position based off previous component
        gridHeight = 20; // 5 per row for performance
        c.gridwidth = 2;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still
        gridXPos = 2;
        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        GridBagLayout gblPer = new GridBagLayout();
        GridBagConstraints c2 = new GridBagConstraints();
        //===========================================================            
        // Constraints         for c2
        c2.fill = GridBagConstraints.BOTH;
        c2.weightx = 1;
        c2.weighty = 0; // No space between bottom and below row?        
        c2.gridx = 0;
        c2.gridy = 0;
        c2.gridwidth = 2;
        c2.gridheight = 1; // 2 spots per row
        //c2.ipady = 20;
        //c2.ipadx = 0;                  
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        panel = new JPanel();
        panel.setLayout(gblPer);

        // Rack status
        label = new JLabel("Performance");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        c2.weighty = 1;
        //=========================================
        label = new JLabel("Predicted");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setOpaque(true);
        label.setBackground(Color.black);
        //label.setBackground(Colours.BlueLight.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        //=========================================
        label = new JLabel("Actual");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setOpaque(true);
        label.setBackground(Color.black);
        //label.setBackground(Colours.BlueLightest.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        //=========================================
        label = new JLabel("Difference");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setOpaque(true);
        label.setBackground(Color.black);
        //label.setBackground(Colours.BlueLight.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c2);
        //=========================================
        // Go down 2 rows
        c2.gridy += 1;
        //=========================================
        //panel.setBorder(border);        
        _Panel_MainPanel.add(panel, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        //c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = gridXPos;
        //c.gridy = gridYPos;
        gridHeight = 4; // 5 per row for performance          
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i <= this.numRacks; i++) {

            panel = panelPerformance(i);
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups            
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        //===========================
        // Operating Costs
        //===========================
        //===========================================================            
        // Constraints     
        gridYPos += gridHeight;
        gridXPos = 0;
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos; // Set new position based off previous component
        gridHeight = 20; // 5 per row for performance
        c.gridwidth = 2;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        GridBagLayout gblOp = new GridBagLayout();
        GridBagConstraints c3 = new GridBagConstraints();
        //===========================================================            
        // Constraints         for c2
        c3.fill = GridBagConstraints.BOTH;
        c3.weightx = 1;
        c3.weighty = 0; // No space between bottom and below row?        
        c3.gridx = 0;
        c3.gridy = 0;
        c3.gridwidth = 2;
        c3.gridheight = 5; // 5 spots per row
        //c3.ipady = 20;
        //c3.ipadx = 0;                  
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        panel = new JPanel();
        panel.setLayout(gblOp);

        // Rack status
        label = new JLabel("Operating Cost ");
        label.setOpaque(true);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBackground(Colours.GreenDark.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================
        // Go down and half the width for the rest
        c3.gridy += 5;
        c3.gridwidth = 1;
        c3.gridheight = 20;
        c3.weighty = 0;
        //=========================================
        label = new JLabel("<html>Operating<br>Cost<br>Rate ¢</html>");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        //panel.add(label, c3);
        //=========================================
        // Go right        
        c3.gridx += 1;
        c3.gridheight = 5;
        c3.weighty = 1;
        //=========================================
        label = new JLabel("Day");
        label.setOpaque(true);
        label.setBackground(Colours.GreenLight.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================
        // Go down
        c3.gridy += 5;
        //=========================================
        label = new JLabel("Month");
        label.setOpaque(true);
        label.setBackground(Colours.GreenLightest.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================       
        // Go down
        c3.gridy += 5;
        //=========================================
        label = new JLabel("Year");
        label.setOpaque(true);
        label.setBackground(Colours.GreenLight.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //panel.setBorder(border);
        _Panel_MainPanel.add(panel, c);

        // Operating Costs constraints
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        //c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 2;
        //c.gridy = gridYPos;
        gridHeight = 20; // 5 per row for performance          
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i <= this.numRacks; i++) {

            panel = panelOperatingDollars(i);
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups            
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            //c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        //===========================
        // Operating Costs
        //===========================
        //===========================================================            
        // Constraints     
        gridYPos += gridHeight;
        gridXPos = 0;
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?        
        c.gridx = gridXPos;
        c.gridy = gridYPos; // Set new position based off previous component
        gridHeight = 20; // 5 per row for performance
        c.gridwidth = 2;
        c.gridheight = gridHeight;
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        gblOp = new GridBagLayout();
        c3 = new GridBagConstraints();
        //===========================================================            
        // Constraints         for c2
        c3.fill = GridBagConstraints.BOTH;
        c3.weightx = 1;
        c3.weighty = 0; // No space between bottom and below row?        
        c3.gridx = 0;
        c3.gridy = 0;
        c3.gridwidth = 2;
        c3.gridheight = 5; // 5 spots per row
        //c3.ipady = 20;
        //c3.ipadx = 0;                  
        // We dont setup next position because we are adding suction groups still
        // End of Constraints
        //===========================================================
        panel = new JPanel();
        panel.setLayout(gblOp);

        // Rack status
        label = new JLabel("Operating kWh ");
        label.setOpaque(true);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBackground(Colours.BlueDark.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================
        // Go down and half the width for the rest
        c3.gridy += 5;
        c3.gridwidth = 1;
        c3.gridheight = 20;
        c3.weighty = 0;
        //=========================================
        label = new JLabel("<html>Operating<br>kWh<br></html>");
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        //panel.add(label, c3);
        //=========================================
        // Go right        
        c3.gridx += 1;
        c3.gridheight = 5;
        c3.weighty = 1;
        //=========================================
        label = new JLabel("Day");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================
        // Go down
        c3.gridy += 5;
        //=========================================
        label = new JLabel("Month");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLightest.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //=========================================       
        // Go down
        c3.gridy += 5;
        //=========================================
        label = new JLabel("Year");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        panel.add(label, c3);
        //panel.setBorder(border);
        _Panel_MainPanel.add(panel, c);

        // Operating kWh constraints
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        //c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 2;
        //c.gridy = gridYPos;
        gridHeight = 20; // 5 per row for performance          
        //c.ipady = 100;
        //c.ipady = 0;                  
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        // rack names + SEI, they have their own panels, incase we want borders
        for (int i = 0; i <= this.numRacks; i++) {

            panel = panelOperatingkWh(i);
            // For each new rack panel, we must assign the grid width
            // to be 3 * num Suctiongroups            
            // 2 cells per system
            //===========================================================            
            // Constraints        
            //c.fill = GridBagConstraints.BOTH;        
            c.weightx = 1;
            //c.weighty = 0; // No space between bottom and below row?        
            c.gridx = gridXPos;
            c.gridy = gridYPos;
            c.gridwidth = rackGridWidth[i];
            c.gridheight = gridHeight;
            //c.ipady = 100;
            //c.ipady = 0;                  
            // Setup next position
            gridXPos += rackGridWidth[i];
            // End of Constraints
            //===========================================================
            _Panel_MainPanel.add(panel, c);

        }

        //===========================================================
        //=========================================================== 
        // Filler area
        gridXPos = 0;
        gridYPos += gridHeight;
        gridWidth = sum;
        gridHeight = 10;
        c.gridwidth = gridWidth;
        c.gridheight = gridHeight;
        c.gridx = gridXPos;
        c.gridy = gridYPos;
        c.weightx = 1;
        c.weighty = 1;
        c.ipady = 120;
        // End of Constraints
        panel = new JPanel();
        panel.setBackground(Color.black);
        //panel.setBorder(border);
        //addPanel(newPanel, gridx, gridy, gridwidth, gridheight, weightx, weighty, fill, padx, pady
        _Panel_MainPanel.add(panel, c);

        // make labels white
        setLabels(_Panel_MainPanel, Colours.White.getCol());
        // do it before last panel

        // Bottom Panel
        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.BOTH;        
        c.weightx = 1;
        c.weighty = 0; // No space between bottom and below row?          
        gridXPos = 0;
        c.gridx = gridXPos;
        c.gridy = gridYPos + gridHeight;
        gridHeight = 5; // 5 per row for performance   

        c.gridwidth = sum;
        c.gridheight = 1;
        //c.ipady = 100;
        c.ipady = 0;
        // We dont setup next position because we are adding suction groups still

        //gridYPos += gridHeight;
        // End of Constraints
        //===========================================================
        panel = df.panelBottom(numRacks * 2 + 2);
        _Panel_MainPanel.add(panel, c);

        _Panel_MainPanel.revalidate();
        _Panel_MainPanel.repaint();

    }

    /**
     * Gets the widget positions of the current panel These positions are stored
     * in the widgetComponents map which contains the component and a string
     * identifying the component
     *
     * @return Map<String, Rectangle> Key, Rectangle of the spot
     */
    public Map<String, Rectangle> positions() {
        //public void positions() {
        //System.out.println("Positions " + rack.getName());
        Map<String, Rectangle> ioPoints = new TreeMap<>();

        if (widgetComponents.isEmpty()) {
            return null;
        }
        for (Map.Entry<String, Component> entry : widgetComponents.entrySet()) {

            Component p = entry.getValue();
            try {
                //System.out.println("Tooltip: " + ((JLabel) p).getToolTipText());
                if (p instanceof JLabel) {
                    //if (((JLabel) p).getToolTipText() != null) {
                    //System.out.println("Has a tooltip:" + ((JLabel) p).getToolTipText());
                    Rectangle r = p.getBounds();
                    Component par = p;
                    while (par.getParent() != _Panel_MainPanel) {
                        par = par.getParent();
                    }
                    r = SwingUtilities.convertRectangle(par, r, _Panel_MainPanel);
                    //((JLabel) p).setText("x=" + r.getX() + ", y=" + r.getY());
                    ioPoints.put(entry.getKey(), r);

                }

            } catch (NullPointerException | IllegalComponentStateException e) {
                System.out.println("Error with " + ((JLabel) p).getName());
            }
        }

        return ioPoints;

    }

    /**
     * sets all the labels to a certain color
     *
     * @param p1 container
     * @param c colour
     */
    public void setLabels(Container p1, Color c) {

        for (Component p : p1.getComponents()) {
            if (p instanceof JLabel) {
                ((JLabel) p).setForeground(Color.white);
            } else {
                if (p instanceof JPanel) {
                    setLabels((Container) p, c);
                }
            }
        }

    }

    /**
     * The rack names at the top
     *
     * @param rackName String of name
     * @return JPanel
     */
    public JPanel panelRackName(String rackName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        // Return a panel containing two labels
        JPanel panel = new JPanel(gbl);
        //===========================
        // RACK NAMES
        //===========================

        label = new JLabel(rackName);
        label.setFont(font.deriveFont(Font.BOLD, 20));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setVerticalAlignment(JLabel.TOP);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 0;
        c.gridwidth = c.gridheight = 2;

        panel.add(label, c);

        panel.setBorder(border);
        panel.setBackground(Colours.BlueDark.getCol());
        return panel;
    }

    /**
     * The rack names at the top
     *
     * @param rackName String of name
     * @return JPanel
     */
    public JPanel panelSiteInfo(String rackName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();

        // Return a panel containing two labels
        JPanel panel = new JPanel(gbl);

        label = new JLabel(rackName);
        label.setFont(font.deriveFont(Font.BOLD, 20));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setVerticalAlignment(JLabel.TOP);
        c.gridwidth = 14;
        c.gridheight = 1;
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.BOTH;
        panel.add(label, c);

        //===========================
        // kWh/BTU Capacity
        //===========================        
        String[] tooltip = new String[]{""};

        label = new JLabel("TBD");
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setVerticalAlignment(JLabel.TOP);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 1;
        c.gridy = 1;
        c.gridwidth = c.gridheight = 2;
        c.ipady = 60;
        widgetComponents.put(tooltip[0], label);
        panel.add(label, c);

        //===========================
        // kWh/BTU Cost
        //===========================
        tooltip = new String[]{""};

        label = new JLabel("TBD");
        label.setBorder(border);
        label.setOpaque(true);
        label.setBackground(Colours.GreenLight.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setVerticalAlignment(JLabel.TOP);
        //c.fill = GridBagConstraints.BOTH;
        c.gridx = 2;
        //c.weightx = 1;
        //c.weighty = 1;
        //c.gridy = 0;
        //c.gridwidth = c.gridheight = 2;
        //c.ipady = 35;        
        widgetComponents.put(tooltip[0], label);
        panel.add(label, c);

        //===========================
        // SEI
        //===========================
        tooltip = new String[]{""};

        label = new JLabel("TBD");
        label.setBorder(border);
        label.setOpaque(true);
        label.setBackground(Colours.BlueLight.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setVerticalAlignment(JLabel.TOP);
        //c.fill = GridBagConstraints.BOTH;
        c.gridx = 4;
        c.weightx = 1;
        //c.weighty = 1;
        //c.gridy = 0;
        //c.gridwidth = c.gridheight = 2;
        //c.ipady = 35;     
        widgetComponents.put(tooltip[0], label);
        panel.add(label, c);

        //===========================
        // Cost/SqFt
        //===========================  
        tooltip = new String[]{""};

        label = new JLabel("TBD");
        label.setBorder(border);
        label.setOpaque(true);
        label.setBackground(Colours.GreenLight.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setVerticalAlignment(JLabel.TOP);
        //c.fill = GridBagConstraints.BOTH;
        c.gridx = 6;
        c.weightx = 1;
        //c.weighty = 1;
        //c.gridy = 0;
        //c.gridwidth = c.gridheight = 2;
        //c.ipady = 35;        
        widgetComponents.put(tooltip[0], label);
        panel.add(label, c);

        panel.setBorder(border);
        panel.setBackground(Colours.BlueDark.getCol());
        //panel.setBackground(Color.black);
        return panel;
    }

    /**
     * Creates a panel for the performance
     *
     * @param rackNum Used to determine which rack this panel is being used for
     * @return JPanel
     */
    public JPanel panelPerformance(int rackNum) {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Cost/hr");
        label.setOpaque(true);
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridy = 0;
        c.gridheight = 1;
        c.ipady = 0;

        panel.add(label, c);
        // KW
        label = new JLabel("  kW   ");
        label.setFont(font.deriveFont(Font.BOLD, 16));
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;

        c.gridy = 0;
        c.gridheight = 1;

        panel.add(label, c);
        c.ipady = 10;
        c.weighty = 1;

        String[] totalTooltip = new String[]{"Performance Total Cost Sum Predicted", "Performance Total kW Sum Predicted"};

        String[] tooltip = new String[]{"Performance Cost Sum Predicted `%rackname`",
            "Performance kW Sum Predicted `%rackname`"};

        Rack rack = null;
        if (rackNum != 0) {
            rack = racks.get(rackNum - 1);
        }

        for (int i = 1; i <= 3; i++) {
            for (int j = 0; j < 2; j++) {
                label = new JLabel();
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
                c.fill = GridBagConstraints.BOTH;
                label.setBorder(border);
                c.gridx = j;
                c.gridy = i;
                label.setOpaque(true);
                if (j == 0) {
                    // green
                    switch (i) {
                        case 1:
                        case 3:
                            label.setBackground(Colours.GreenLight.getCol());
                            break;
                        case 2:
                            label.setBackground(Colours.GreenLightest.getCol());
                            break;
                    }
                } else {
                    switch (i) {
                        case 1:
                        case 3:
                            label.setBackground(Colours.BlueLight.getCol());
                            break;
                        case 2:
                            label.setBackground(Colours.BlueLightest.getCol());
                            break;
                    }
                }
                label.setBackground(Color.black);
                c.ipady = 40;
                String replace = "";
                if (rack != null) {
                    // Replace string names
                    // Cost when j == 0 (0,1,2)
                    // kW when j == 1 (3,4,5)
                    if (i == 1) {
                        replace = tooltip[j].replace("`%rackname`", rack.getName());
                    }
                } else {
                    // Total strings
                    if (i == 1) {
                        replace = totalTooltip[j];
                    }
                }

                if ((i == 1 && j == 0) || (i == 1 && j == 1)) {
                    widgetComponents.put(replace, label);
                }
                panel.add(label, c);
            }
        }

        // Cost -> KW
        // Label | Label 
        // Label | Label
        // Label | Label
        //panel.setBorder(border);
        return panel;

    }

    /**
     * Creates the operating panel
     *
     * @param rackNum
     * @return JPanel
     */
    public JPanel panelOperatingDollars(int rackNum) {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Previous");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.add(label, c);
        // KW
        label = new JLabel("Current");
        label.setOpaque(true);
        label.setBackground(Colours.GreenDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        //c.weightx = 1;
        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.add(label, c);

        String[] totalTooltip = new String[]{"Op Cost Total Previous Day", "Op Cost Total Previous Month",
            "Op Cost Total Previous Year", "Op Cost Total Current Day",
            "Op Cost Total Current Month", "Op Cost Total Current Year"};

        String[] tooltip = new String[]{"Op Cost Previous Day `%rackname`", "Op Cost Previous Month `%rackname`",
            "Op Cost Previous Year `%rackname`", "Op Cost Sum Current Day `%rackname`",
            "Op Cost Sum Current Month `%rackname`", "Op Cost Sum Current Year `%rackname`"};

        Rack rack = null;
        if (rackNum != 0) {
            rack = racks.get(rackNum - 1);
        }

        c.weighty = 1;
        for (int i = 1; i <= 3; i++) {
            for (int j = 0; j < 2; j++) {
                label = new JLabel();
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
                c.fill = GridBagConstraints.BOTH;
                label.setBorder(border);
                c.gridx = j;
                c.gridy = i;
                label.setOpaque(true);
                switch (i) {
                    case 1:
                    case 3:
                        label.setBackground(Colours.GreenLight.getCol());
                        break;
                    case 2:
                        label.setBackground(Colours.GreenLightest.getCol());
                        break;
                }
                c.ipady = 40;

                String replace = "";
                if (rack != null) {
                    // Replace string names
                    // Cost when j == 0 (0,1,2)
                    // kW when j == 1 (3,4,5)
                    replace = tooltip[j * 3 + i - 1].replace("`%rackname`", rack.getName());
                } else {
                    // Total strings
                    replace = totalTooltip[j * 3 + i - 1];
                }

                widgetComponents.put(replace, label);

                panel.add(label, c);
            }
        }

        // Cost -> KW
        // Label | Label 
        // Label | Label
        // Label | Label
        //panel.setBorder(border);
        return panel;

    }

    /**
     * Creates the operating panel
     *
     * @param rackNum
     * @return JPanel
     */
    public JPanel panelOperatingkWh(int rackNum) {
        // Condenser Panel will list the condensers 
        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        // Return a panel containing condenser labels
        JPanel panel = new JPanel(gbl);
        // Cost
        label = new JLabel("Previous");
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.weightx = 1;
        c.weighty = 0;
        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.add(label, c);
        // KW
        label = new JLabel("Current");
        label.setOpaque(true);
        label.setBackground(Colours.BlueDark.getCol());
        label.setBorder(border);
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        //c.weightx = 1;
        c.gridy = 0;
        c.gridheight = 1;

        label.setFont(font.deriveFont(Font.BOLD, 16));
        panel.add(label, c);

        String[] totalTooltip = new String[]{"Op kWh Total Previous Day", "Op kWh Total Previous Month",
            "Op kWh Total Previous Year", "Op kWh Total Current Day",
            "Op kWh Total Current Month", "Op kWh Total Current Year"};

        String[] tooltip = new String[]{"Op kWh Previous Day `%rackname`", "Op kWh Previous Month `%rackname`",
            "Op kWh Previous Year `%rackname`", "Op kWh Counter Current Day `%rackname`",
            "Op kWh Counter Current Month `%rackname`", "Op kWh Counter Current Year `%rackname`"};

        Rack rack = null;
        if (rackNum != 0) {
            rack = racks.get(rackNum - 1);
        }

        c.weighty = 1;
        for (int i = 1; i <= 3; i++) {
            for (int j = 0; j < 2; j++) {
                label = new JLabel();
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
                c.fill = GridBagConstraints.BOTH;
                label.setBorder(border);
                c.gridx = j;
                c.gridy = i;
                label.setOpaque(true);
                switch (i) {
                    case 1:
                    case 3:
                        label.setBackground(Colours.BlueLight.getCol());
                        break;
                    case 2:
                        label.setBackground(Colours.BlueLightest.getCol());
                        break;
                }
                c.ipady = 40;

                String replace = "";
                if (rack != null) {
                    // Replace string names
                    // Cost when j == 0 (0,1,2)
                    // kW when j == 1 (3,4,5)
                    replace = tooltip[j * 3 + i - 1].replace("`%rackname`", rack.getName());
                } else {
                    // Total strings
                    replace = totalTooltip[j * 3 + i - 1];
                }

                widgetComponents.put(replace, label);
                panel.add(label, c);
            }
        }

        return panel;

    }

    /**
     * Top panel
     *
     * @param imgUrl file path for the image url
     * @param storeName string store name
     * @return JPanel
     */
    public JPanel panelTop(String imgUrl, String storeName) {

        JLabel label;
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        JPanel panel = new JPanel();
        panel.setLayout(gbl);

        //===========================================================
        // Constraints        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0;
        c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 0;
        c.gridy = 1;
        c.gridwidth = 10;
        c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================
        //===========================
        // store logo 
        //===========================       
        label = new JLabel();
        if (!"".equals(imgUrl)) {
            ImageIcon icon = new ImageIcon(imgUrl);
            label.setIcon(icon);
        } else {
            label.setText("NO LOGO SELECTED");
        }
        //label.setBorder(border);        
        label.setAlignmentX((Component.LEFT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 1;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 10;
        //c.gridy = 0;
        c.gridwidth = 20;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("");
        //widgetComponents.put("Store $/kWh", label);
        //label.setBorder(border);        
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel.add(label, c);

        //===========================================================
        // Constraints        
        //c.fill = GridBagConstraints.HORIZONTAL;        
        c.weightx = 0;
        //c.weighty = 0; // No space between bottom and below row?          
        c.gridx = 30;
        //c.gridy = 1;
        c.gridwidth = 10;
        //c.gridheight = 2;
        //c.ipady = 100;
        //c.ipady = 0; 
        // End of Constraints
        //===========================================================

        // Store
        label = new JLabel("ENERGY INFO             " + storeName);
        label.setOpaque(true);
        label.setBackground(Color.BLACK);
        label.setForeground(Colours.Gray.getCol());
        label.setFont(font.deriveFont(Font.BOLD, 22));
        label.setAlignmentX((Component.RIGHT_ALIGNMENT));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setBorder(BorderFactory.createLoweredBevelBorder());
        panel.add(label, c);

        panel.setBackground(Colours.Gray.getCol());
        panel.setBorder(border);
        return panel;

    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel _Panel_MainPanel;
    // End of variables declaration                   
}
